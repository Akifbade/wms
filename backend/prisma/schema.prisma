// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Multi-Tenant Companies
model Company {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  website     String?
  logo        String?
  plan        String   @default("BASIC") // BASIC, PRO, ENTERPRISE
  ratePerDay  Float    @default(2.0) // KWD per day
  currency    String   @default("KWD")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users           User[]
  racks           Rack[]
  shipments         Shipment[]
  movingJobs        MovingJob[]
  expenses          Expense[]
  invoiceSettings   InvoiceSettings?
  customFields      CustomField[]
  billingSettings   BillingSettings?
  chargeTypes       ChargeType[]
  invoices          Invoice[]
  invoiceLineItems  InvoiceLineItem[]
  payments          Payment[]
  shipmentCharges   ShipmentCharges[]
  
  @@map("companies")
}

// Users with Role-based Access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      String   @default("WORKER") // ADMIN, MANAGER, WORKER
  skills    String?  // JSON string of skills array
  isActive  Boolean  @default(true)
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company     Company         @relation(fields: [companyId], references: [id])
  activities  RackActivity[]
  jobAssignments JobAssignment[]
  
  @@map("users")
}

// Central Rack System (Core Integration Point)
model Rack {
  id           String   @id @default(cuid())
  code         String   // A1, A2, B1, etc.
  qrCode       String   @unique
  rackType     String   @default("STORAGE") // STORAGE, MATERIALS, EQUIPMENT
  location     String?
  capacityTotal Float   @default(100)
  capacityUsed Float    @default(0)
  minCapacity  Int      @default(2) // Minimum capacity requirement
  status       String   @default("ACTIVE") // ACTIVE, MAINTENANCE, RESERVED
  lastActivity DateTime?
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company      Company        @relation(fields: [companyId], references: [id])
  shipments    Shipment[]
  boxes        ShipmentBox[]  // Individual boxes assigned
  activities   RackActivity[]
  inventory    RackInventory[]
  
  @@unique([code, companyId])
  @@map("racks")
}

// Rack Inventory Tracking
model RackInventory {
  id              String   @id @default(cuid())
  rackId          String
  itemType        String   // SHIPMENT, MATERIAL, EQUIPMENT
  itemId          String
  quantityCurrent Int      @default(0)
  quantityReserved Int     @default(0)
  lastMovement    DateTime @default(now())
  updatedBy       String?
  companyId       String
  
  // Relations
  rack            Rack     @relation(fields: [rackId], references: [id])
  
  @@map("rack_inventory")
}

// All Rack Activities (Audit Trail)
model RackActivity {
  id           String   @id @default(cuid())
  rackId       String
  userId       String
  activityType String   // ASSIGN, REMOVE, USE, MOVE, CHECK
  itemDetails  String
  quantityBefore Int?
  quantityAfter  Int?
  photos       String?  // JSON string of photo URLs array
  notes        String?
  gpsLocation  String?
  timestamp    DateTime @default(now())
  companyId    String

  // Relations
  rack         Rack     @relation(fields: [rackId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  
  @@map("rack_activities")
}

// Shipment Management
model Shipment {
  id              String    @id @default(cuid())
  name            String
  referenceId     String
  originalBoxCount Int
  currentBoxCount Int
  type            String    // PERSONAL, COMMERCIAL
  arrivalDate     DateTime
  clientName      String?
  clientPhone     String?
  clientEmail     String?
  description     String?
  estimatedValue  Float?
  notes           String?
  qrCode          String    @unique // Master QR for shipment
  status          String    @default("ACTIVE") // ACTIVE, PARTIAL, RELEASED
  rackId          String?   // DEPRECATED - use boxes relation instead
  assignedAt      DateTime?
  releasedAt      DateTime?
  storageCharge   Float?
  companyId       String
  createdBy       String?   // User ID who created
  updatedBy       String?   // User ID who last updated
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  company         Company          @relation(fields: [companyId], references: [id])
  rack            Rack?            @relation(fields: [rackId], references: [id])
  boxes           ShipmentBox[]    // Individual boxes with QR codes
  withdrawals     Withdrawal[]
  invoices        Invoice[]
  charges         ShipmentCharges?
  
  @@map("shipments")
}

// Individual Boxes (Each has own QR code)
model ShipmentBox {
  id          String    @id @default(cuid())
  shipmentId  String
  boxNumber   Int       // 1, 2, 3, etc.
  qrCode      String    @unique // Individual box QR
  rackId      String?   // Assigned rack
  status      String    @default("PENDING") // PENDING, IN_STORAGE, RELEASED
  assignedAt  DateTime?
  releasedAt  DateTime?
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  shipment    Shipment  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  rack        Rack?     @relation(fields: [rackId], references: [id])
  
  @@unique([shipmentId, boxNumber])
  @@map("shipment_boxes")
}

// Partial Withdrawals
model Withdrawal {
  id                 String   @id @default(cuid())
  shipmentId         String
  withdrawnBoxCount  Int
  remainingBoxCount  Int
  withdrawalDate     DateTime @default(now())
  status             String   @default("COMPLETED") // PENDING, COMPLETED, CANCELLED
  reason             String?
  notes              String?
  photos             String?  // JSON string of photo URLs array
  receiptNumber      String?
  withdrawnBy        String   // Person who collected
  authorizedBy       String?  // Staff who authorized
  companyId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  shipment           Shipment @relation(fields: [shipmentId], references: [id])
  
  @@map("withdrawals")
}

// Moving Jobs
model MovingJob {
  id           String   @id @default(cuid())
  title        String
  jobType      String   // LOCAL, INTERNATIONAL, PACKING_ONLY
  clientName   String
  clientPhone  String
  fromAddress  String
  toAddress    String?
  scheduledDate DateTime
  estimatedHours Int?
  status       String   @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED
  totalCost    Float?
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company      Company        @relation(fields: [companyId], references: [id])
  assignments  JobAssignment[]
  
  @@map("moving_jobs")
}

// Job Assignments
model JobAssignment {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  role      String   // LEAD, PACKER, DRIVER, HELPER
  assignedAt DateTime @default(now())
  companyId String

  // Relations
  job       MovingJob @relation(fields: [jobId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  
  @@map("job_assignments")
}

// Expense Management
model Expense {
  id          String   @id @default(cuid())
  title       String
  category    String   // MAINTENANCE, FUEL, MATERIALS, OTHER
  amount      Float
  currency    String   @default("KWD")
  description String?
  receipts    String?  // JSON string of receipt URLs array
  expenseDate DateTime
  approvedBy  String?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  
  @@map("expenses")
}

// Invoice Settings
model InvoiceSettings {
  id              String   @id @default(cuid())
  companyId       String   @unique
  templateType    String   @default("MODERN")
  primaryColor    String   @default("#2563eb")
  secondaryColor  String   @default("#64748b")
  showLogo        Boolean  @default(true)
  footerText      String?
  termsConditions String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company         Company  @relation(fields: [companyId], references: [id])
  
  @@map("invoice_settings")
}

// Billing Settings with Invoice Customization
model BillingSettings {
  id                    String   @id @default(cuid())
  companyId             String   @unique
  
  // Storage Rates
  storageRateType       String   @default("PER_DAY") // PER_DAY, PER_WEEK, PER_MONTH, FLAT
  storageRatePerBox     Float    @default(0.500)
  storageRatePerWeek    Float?
  storageRatePerMonth   Float?
  
  // Tax & Currency
  taxEnabled            Boolean  @default(true)
  taxRate               Float    @default(5.0)
  currency              String   @default("KWD")
  
  // Invoice Settings
  invoicePrefix         String   @default("INV")
  invoiceDueDays        Int      @default(10)
  
  // Grace Periods
  gracePeriodDays       Int      @default(3)
  minimumCharge         Float    @default(10.0)
  
  // Invoice Customization
  logoUrl               String?
  logoPosition          String   @default("LEFT") // LEFT, CENTER, RIGHT
  primaryColor          String   @default("#2563eb")
  secondaryColor        String   @default("#64748b")
  showCompanyDetails    Boolean  @default(true)
  showBankDetails       Boolean  @default(true)
  showTermsConditions   Boolean  @default(true)
  
  // Bank Details
  bankName              String?
  accountNumber         String?
  accountName           String?
  iban                  String?
  swiftCode             String?
  
  // Terms & Conditions
  invoiceFooterText     String?
  termsAndConditions    String?
  paymentInstructions   String?
  
  // Additional Fields
  taxRegistrationNo     String?
  companyRegistrationNo String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  company               Company      @relation(fields: [companyId], references: [id])
  chargeTypes           ChargeType[]
  
  @@map("billing_settings")
}

// Custom Charge Types
model ChargeType {
  id                    String   @id @default(cuid())
  companyId             String
  billingSettingsId     String
  
  // Charge Details
  name                  String
  code                  String
  description           String?
  category              String   // STORAGE, RELEASE, SERVICE, OTHER
  
  // Calculation Method
  calculationType       String   // PER_BOX, PER_SHIPMENT, PERCENTAGE, FLAT, PER_DAY, PER_KG, PER_HOUR, PER_CUBIC_M
  rate                  Float
  
  // Advanced Options
  minCharge             Float?
  maxCharge             Float?
  applyOnRelease        Boolean  @default(true)
  applyOnStorage        Boolean  @default(false)
  isTaxable             Boolean  @default(true)
  isActive              Boolean  @default(true)
  isDefault             Boolean  @default(false)
  
  // Display
  displayOrder          Int      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  company               Company         @relation(fields: [companyId], references: [id])
  billingSettings       BillingSettings @relation(fields: [billingSettingsId], references: [id])
  
  @@unique([companyId, code])
  @@map("charge_types")
}

// Invoices
model Invoice {
  id                    String   @id @default(cuid())
  invoiceNumber         String   @unique
  companyId             String
  shipmentId            String
  clientName            String
  clientPhone           String?
  clientAddress         String?
  
  // Invoice Details
  invoiceDate           DateTime @default(now())
  dueDate               DateTime
  invoiceType           String   @default("STORAGE") // STORAGE, PARTIAL, PERIODIC
  
  // Amounts
  subtotal              Float
  taxAmount             Float
  discountAmount        Float    @default(0)
  totalAmount           Float
  
  // Payment Info
  paymentStatus         String   @default("PENDING") // PENDING, PAID, PARTIAL, OVERDUE, CANCELLED
  paidAmount            Float    @default(0)
  balanceDue            Float
  paymentDate           DateTime?
  paymentMethod         String?
  transactionRef        String?
  
  // Additional Info
  notes                 String?
  termsAndConditions    String?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  company               Company           @relation(fields: [companyId], references: [id])
  shipment              Shipment          @relation(fields: [shipmentId], references: [id])
  lineItems             InvoiceLineItem[]
  payments              Payment[]
  
  @@map("invoices")
}

// Invoice Line Items
model InvoiceLineItem {
  id                    String   @id @default(cuid())
  invoiceId             String
  companyId             String
  
  // Line Item Details
  chargeTypeId          String?
  description           String
  category              String
  
  // Calculation Details
  quantity              Float    @default(1)
  unitPrice             Float
  amount                Float
  
  // Tax
  isTaxable             Boolean  @default(true)
  taxRate               Float?
  taxAmount             Float    @default(0)
  
  // Display
  displayOrder          Int      @default(0)
  
  createdAt             DateTime @default(now())
  
  // Relations
  invoice               Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  company               Company  @relation(fields: [companyId], references: [id])
  
  @@map("invoice_line_items")
}

// Payments
model Payment {
  id                    String   @id @default(cuid())
  invoiceId             String
  companyId             String
  
  amount                Float
  paymentDate           DateTime @default(now())
  paymentMethod         String   // CASH, CARD, BANK_TRANSFER, KNET
  transactionRef        String?
  receiptNumber         String?
  
  notes                 String?
  createdBy             String?
  
  createdAt             DateTime @default(now())
  
  // Relations
  invoice               Invoice  @relation(fields: [invoiceId], references: [id])
  company               Company  @relation(fields: [companyId], references: [id])
  
  @@map("payments")
}

// Shipment Charges Tracking
model ShipmentCharges {
  id                    String   @id @default(cuid())
  shipmentId            String   @unique
  companyId             String
  
  // Current Charges
  currentStorageCharge  Float    @default(0)
  daysStored            Int      @default(0)
  lastCalculatedDate    DateTime @default(now())
  
  // Released Items Tracking
  totalBoxesReleased    Int      @default(0)
  totalInvoiced         Float    @default(0)
  totalPaid             Float    @default(0)
  outstandingBalance    Float    @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  shipment              Shipment @relation(fields: [shipmentId], references: [id])
  company               Company  @relation(fields: [companyId], references: [id])
  
  @@map("shipment_charges")
}

// Custom Fields
model CustomField {
  id           String   @id @default(cuid())
  companyId    String
  fieldName    String
  fieldType    String   // TEXT, NUMBER, DATE, DROPDOWN, CHECKBOX
  fieldOptions String?  // JSON string of options array
  isRequired   Boolean  @default(false)
  isActive     Boolean  @default(true)
  section      String   @default("SHIPMENT") // SHIPMENT, JOB, EXPENSE
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company      Company  @relation(fields: [companyId], references: [id])
  values       CustomFieldValue[]
  
  @@map("custom_fields")
}

// Custom Field Values - Stores actual data for custom fields
model CustomFieldValue {
  id            String   @id @default(cuid())
  customFieldId String
  entityType    String   // SHIPMENT, JOB, EXPENSE
  entityId      String   // ID of shipment/job/expense
  fieldValue    String   // Stored as string, converted based on fieldType
  companyId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  
  @@unique([customFieldId, entityId])
  @@index([entityType, entityId])
  @@map("custom_field_values")
}