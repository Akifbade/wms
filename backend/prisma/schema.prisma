// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum Role {
  ADMIN    // Full access to everything
  MANAGER  // Manage jobs, view reports, manage users
  DRIVER   // View assigned jobs, update job status, mobile app access
  WORKER   // General warehouse worker
  SCANNER  // Only scan shipments, view pending shipments
  PACKER   // Dummy user for job staff assignment only
  LABOR    // Dummy user for job staff assignment only
}

// ============================================
// MODELS
// ============================================

// Multi-Tenant Companies
model Company {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  phone      String?
  address    String?
  website    String?
  logo       String?
  plan       String  @default("BASIC") // BASIC, PRO, ENTERPRISE
  ratePerDay Float   @default(2.0) // KWD per day
  currency   String  @default("KWD")
  isActive   Boolean @default(true)

  // Branding fields
  primaryColor    String? @default("#4F46E5")
  secondaryColor  String? @default("#7C3AED")
  accentColor     String? @default("#10B981")
  showCompanyName Boolean @default(true)
  logoSize        String? @default("medium") // small, medium, large

  // NEW: Contract & Contact Info
  contactPerson      String?
  contactPhone       String?
  contractStatus     String? @default("ACTIVE") // ACTIVE, INACTIVE, EXPIRED
  contractDocument   String? // File path to contract PDF/DOC

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users             User[]
  racks             Rack[]
  shipments         Shipment[]
  movingJobs        MovingJob[]
  expenses          Expense[]
  categories        Category[] // NEW: One-to-many with categories
  companyProfiles   CompanyProfile[] // NEW: Customer/vendor company profiles (DIOR, JAZEERA, etc)
  invoiceSettings   InvoiceSettings?
  customFields      CustomField[]
  billingSettings   BillingSettings?
  chargeTypes       ChargeType[]
  invoices          Invoice[]
  invoiceLineItems  InvoiceLineItem[]
  payments          Payment[]
  shipmentCharges   ShipmentCharges[]
  shipmentSettings  ShipmentSettings?
  templateSettings  TemplateSettings?
  rolePermissions   RolePermission[]
  packingMaterials  PackingMaterial[]
  materialCategories MaterialCategory[]
  vendors           Vendor[]
  stockBatches      StockBatch[]
  rackLevels        RackStockLevel[]
  materialIssues    MaterialIssue[]
  materialReturns   MaterialReturn[]
  materialDamages   MaterialDamage[]
  materialApprovals MaterialApproval[]
  jobCostSnapshots  JobCostSnapshot[]
  systemPlugins     SystemPlugin[]
  JobAssignment     JobAssignment[]
  SystemPluginLog   SystemPluginLog[]
  shipmentItems     ShipmentItem[] // NEW: Detailed item tracking
  
  // NEW: Enhanced Material System Relations
  materialUsages       MaterialUsage[]
  materialTransfers    MaterialTransfer[]
  stockAlerts          StockAlert[]
  purchaseOrders       PurchaseOrder[]
  purchaseOrderItems   PurchaseOrderItem[]
  materialPriceHistory MaterialPriceHistory[]

  @@map("companies")
}

// Users with Role-based Access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  role      Role     @default(WORKER) // Enum: ADMIN, MANAGER, DRIVER, WORKER, SCANNER, PACKER, LABOR
  skills    String? // JSON string of skills array
  isActive  Boolean  @default(true)
  isDummy   Boolean  @default(false) // True for PACKER/LABOR (staff-only users)
  permissions String? @db.Text // JSON string for granular permissions override
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile Enhancement Fields
  avatar           String? // Avatar image URL or path
  position         String? // Job position/title
  department       String? // Department name
  lastLoginAt      DateTime? // Last login timestamp
  resetToken       String? // Password reset token
  resetTokenExpiry DateTime? // Token expiry time

  // Relations
  company                 Company            @relation(fields: [companyId], references: [id])
  rackActivities          RackActivity[]
  jobAssignments          JobAssignment[]
  movingJobsLead          MovingJob[]        @relation("MovingJobTeamLead")
  stockBatchesReceived    StockBatch[]       @relation("StockBatchReceivedBy")
  materialIssuesCreated   MaterialIssue[]    @relation("MaterialIssuedBy")
  materialReturnsRecorded MaterialReturn[]   @relation("MaterialReturnRecordedBy")
  damagesRecorded         MaterialDamage[]   @relation("DamageRecordedBy")
  damagesApproved         MaterialDamage[]   @relation("DamageApprovedBy")
  approvalsRequested      MaterialApproval[] @relation("ApprovalRequestedBy")
  approvalsDecided        MaterialApproval[] @relation("ApprovalDecidedBy")
  
  // NEW: Enhanced Material System Relations
  materialUsages          MaterialUsage[]    @relation("MaterialUsedBy")
  transfersRequested      MaterialTransfer[] @relation("TransferRequestedBy")
  transfersApproved       MaterialTransfer[] @relation("TransferApprovedBy")
  transfersCompleted      MaterialTransfer[] @relation("TransferCompletedBy")
  alertsResolved          StockAlert[]       @relation("AlertResolvedBy")
  purchaseOrdersCreated   PurchaseOrder[]    @relation("POCreatedBy")
  purchaseOrdersApproved  PurchaseOrder[]    @relation("POApprovedBy")

  // Shipment User Tracking Relations
  shipmentsCreated  Shipment[] @relation("ShipmentCreatedBy")
  shipmentsAssigned Shipment[] @relation("ShipmentAssignedBy")
  shipmentsReleased Shipment[] @relation("ShipmentReleasedBy")

  // NEW: Activity Tracking
  activities UserActivity[]
  
  // NEW: File Upload Tracking
  uploadedFiles JobFile[]     @relation("JobFileUploads")

  @@map("users")
}

// User Activity Tracking (NEW - Hidden Admin Feature)
model UserActivity {
  id         Int      @id @default(autoincrement())
  userId     String   @db.VarChar(191)
  action     String   @db.VarChar(100)
  entityType String   @db.VarChar(50)
  entityId   String?  @db.VarChar(191)
  details    String?  @db.Text
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?  @db.Text
  timestamp  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([timestamp])
  @@map("user_activities")
}

// NEW: Rack Category System (Company-specific categories with branding)
model Category {
  id          String    @id @default(cuid())
  name        String    // DIOR, COMPANY_MATERIAL, JAZEERA, etc.
  description String?   @db.Text
  logo        String?   // Logo/icon file path
  color       String?   // Hex color code (e.g., #FF5733)
  icon        String?   // Icon name or emoji
  companyId   String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  racks       Rack[]    // One-to-many: A category has many racks

  @@unique([name, companyId]) // Category name unique per company
  @@map("categories")
}

// Company Profiles (DIOR, JAZEERA, etc - Customer/Vendor companies)
model CompanyProfile {
  id               String   @id @default(cuid())
  name             String   // e.g., "DIOR", "JAZEERA", "COMPANY_MATERIAL"
  description      String?
  logo             String?  // File path to logo
  contactPerson    String?  // Contact person name
  contactPhone     String?  // Contact phone number
  contractStatus   String   @default("ACTIVE") // ACTIVE, INACTIVE, EXPIRED, PENDING
  isActive         Boolean  @default(true)
  companyId        String   // Parent company
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  racks            Rack[]   // One-to-many: Profile can have many racks assigned
  shipments        Shipment[] // One-to-many: Shipments from/to this company profile

  @@unique([name, companyId]) // Company profile name unique per company
  @@map("company_profiles")
}

// Central Rack System (Core Integration Point)
model Rack {
  id               String    @id @default(cuid())
  code             String // A1, A2, B1, etc.
  qrCode           String    @unique
  rackType         String    @default("STORAGE") // STORAGE, MATERIALS, EQUIPMENT
  categoryId       String?   // FK to Category (instead of string category)
  companyProfileId String?   // NEW: FK to CompanyProfile (DIOR, JAZEERA, etc)
  location         String?
  
  // Size/Dimensions
  length        Float?    // Length in meters/feet
  width         Float?    // Width in meters/feet
  height        Float?    // Height in meters/feet
  dimensionUnit String    @default("METERS") // METERS, FEET
  
  capacityTotal Float     @default(100)
  capacityUsed  Float     @default(0)
  minCapacity   Int       @default(2) // Minimum capacity requirement
  status        String    @default("ACTIVE") // ACTIVE, MAINTENANCE, RESERVED
  lastActivity  DateTime?
  companyId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete: null = active, has timestamp = deleted

  // Relations
  company           Company           @relation(fields: [companyId], references: [id])
  category          Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull) // FK to Category
  companyProfile    CompanyProfile?   @relation(fields: [companyProfileId], references: [id], onDelete: SetNull) // NEW: FK to CompanyProfile
  boxes             ShipmentBox[] // Individual boxes assigned
  activities        RackActivity[]
  inventory         RackInventory[]
  materialLevels    RackStockLevel[] @relation("RackMaterialLevels")
  MaterialReturn MaterialReturn[]
  jobMaterials   MaterialIssue[]  @relation("JobMaterialRack") // Materials assigned to jobs
  transfersFrom  MaterialTransfer[] @relation("TransferFromRack") // NEW: Transfers from this rack
  transfersTo    MaterialTransfer[] @relation("TransferToRack")   // NEW: Transfers to this rack

  @@unique([code, companyId])
  @@index([deletedAt]) // Index for filtering active racks
  @@map("racks")
}

// Rack Inventory Tracking
model RackInventory {
  id               String   @id @default(cuid())
  rackId           String
  itemType         String // SHIPMENT, MATERIAL, EQUIPMENT
  itemId           String
  quantityCurrent  Int      @default(0)
  quantityReserved Int      @default(0)
  lastMovement     DateTime @default(now())
  updatedBy        String?
  companyId        String

  // Relations
  rack Rack @relation(fields: [rackId], references: [id])

  @@map("rack_inventory")
}

// All Rack Activities (Audit Trail)
model RackActivity {
  id             String   @id @default(cuid())
  rackId         String
  userId         String
  activityType   String // ASSIGN, REMOVE, USE, MOVE, CHECK
  itemDetails    String
  quantityBefore Int?
  quantityAfter  Int?
  photos         String? // JSON string of photo URLs array
  notes          String?
  gpsLocation    String?
  timestamp      DateTime @default(now())
  companyId      String

  // Relations
  rack Rack @relation(fields: [rackId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("rack_activities")
}

// Shipment Management
model Shipment {
  id               String    @id @default(cuid())
  name             String
  referenceId      String
  originalBoxCount Int
  currentBoxCount  Int
  type             String // PERSONAL, COMMERCIAL
  arrivalDate      DateTime
  clientName       String?
  clientPhone      String?
  clientEmail      String?
  description      String?
  estimatedValue   Float?
  notes            String?
  qrCode           String    @unique // Master QR for shipment
  status           String    @default("ACTIVE") // ACTIVE, PARTIAL, RELEASED
  assignedAt       DateTime?
  releasedAt       DateTime?
  storageCharge    Float?
  companyId        String

  // User Tracking Fields
  createdById  String? // User ID who created (temporarily optional for migration)
  assignedById String? // User ID who assigned to rack
  releasedById String? // User ID who released

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete: null = active, has timestamp = deleted

  // Warehouse Integration Fields (Non-breaking additions)
  isWarehouseShipment Boolean @default(false) // Flag for warehouse vs regular shipments
  warehouseData       String? // JSON string for additional warehouse-specific data
  shipper             String? // Sender information for warehouse
  consignee           String? // Receiver information for warehouse

  // NEW: Enhanced Warehouse Fields
  category           String    @default("CUSTOMER_STORAGE") // CUSTOMER_STORAGE, AIRPORT_CARGO, WAREHOUSE_STOCK
  companyProfileId   String?   // NEW: FK to CompanyProfile (DIOR, JAZEERA, etc)
  awbNumber          String?   // Air Waybill number for airport shipments
  flightNumber       String?   // Flight number for airport tracking
  origin             String?   // Origin airport/location
  destination        String?   // Destination airport/location
  customerName       String?   // Normalized customer name for grouping (e.g., "Dior", "Boodai Trading")
  palletCount       Int?      // Number of pallets recorded at intake
  boxesPerPallet    Int?      // Boxes contained per pallet
  
  // NEW: Dimension & CBM fields for volume-based charging
  length            Float?    // Length in centimeters
  width             Float?    // Width in centimeters
  height            Float?    // Height in centimeters
  cbm               Float?    // Cubic meters (m³) - auto-calculated: (L×W×H)/1000000
  weight            Float?    // Weight in kilograms

  // Relations
  company            Company           @relation(fields: [companyId], references: [id])
  companyProfile     CompanyProfile?   @relation(fields: [companyProfileId], references: [id], onDelete: SetNull) // NEW: FK to CompanyProfile
  boxes              ShipmentBox[]     // Individual boxes with QR codes - USE THIS for rack assignment
  withdrawals        Withdrawal[]
  invoices           Invoice[]
  charges            ShipmentCharges?
  items              ShipmentItem[]    // NEW: Detailed item tracking
  materialUsages     MaterialUsage[]   // NEW: Materials used for this shipment

  // User Relations for Tracking
  createdBy  User? @relation("ShipmentCreatedBy", fields: [createdById], references: [id])
  assignedBy User? @relation("ShipmentAssignedBy", fields: [assignedById], references: [id])
  releasedBy User? @relation("ShipmentReleasedBy", fields: [releasedById], references: [id])

  @@index([category])
  @@index([customerName])
  @@index([awbNumber])
  @@index([deletedAt]) // Index for filtering active shipments
  @@map("shipments")
}

// Individual Boxes (Each has own QR code)
model ShipmentBox {
  id         String    @id @default(cuid())
  shipmentId String
  boxNumber  Int // 1, 2, 3, etc.
  qrCode     String    @unique // Individual box QR
  rackId     String? // Assigned rack
  status     String    @default("PENDING") // PENDING, IN_STORAGE, RELEASED
  assignedAt DateTime?
  releasedAt DateTime?
  companyId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  // Warehouse Integration Fields (Non-breaking additions)  
  pieceWeight Float? // Weight of this specific piece/box
  pieceQR     String? // Alternative QR format for warehouse pieces
  
  // Photo attachments - JSON array of photo URLs uploaded during rack assignment
  photos      String? // JSON array: ["uploads/shipments/photo1.jpg", "uploads/shipments/photo2.jpg"]

  // Relations with proper cascading
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  rack     Rack?    @relation(fields: [rackId], references: [id], onDelete: SetNull)

  @@unique([shipmentId, boxNumber])
  @@index([rackId])
  @@index([status])
  @@map("shipment_boxes")
}

// NEW: Detailed Item Tracking per Shipment
model ShipmentItem {
  id                String   @id @default(cuid())
  shipmentId        String
  itemName          String // e.g., "Louis Vuitton Bags", "Nike Shoes"
  itemDescription   String? // Additional details
  category          String // BAGS, SHOES, ELECTRONICS, FURNITURE, CLOTHING, DOCUMENTS, FRAGILE, GENERAL
  quantity          Int // Number of items
  weight            Float? // Weight in KG
  value             Float? // Estimated value in KWD
  barcode           String? // Item barcode if available
  photos            String? // JSON array of photo URLs
  boxNumbers        String? // JSON array of box numbers containing this item e.g., [1,2,3]
  customAttributes  String? // JSON for custom fields like size, color, brand
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id])

  @@index([shipmentId])
  @@index([category])
  @@map("shipment_items")
}

// Partial Withdrawals
model Withdrawal {
  id                String   @id @default(cuid())
  shipmentId        String
  withdrawnBoxCount Int
  remainingBoxCount Int
  withdrawalDate    DateTime @default(now())
  status            String   @default("COMPLETED") // PENDING, COMPLETED, CANCELLED
  reason            String?
  notes             String?
  photos            String? // JSON string of photo URLs array
  receiptNumber     String?
  withdrawnBy       String // Person who collected
  authorizedBy      String? // Staff who authorized
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id])

  @@map("withdrawals")
}

// ==================== RACK EXTENSIONS FOR MATERIALS ====================

// Extend Rack model with material storage relations
// (Add this relation to existing Rack model if not already present)
// materialStorage MaterialRackStorage[] @relation("MaterialStorage")

// Expense Management
model Expense {
  id          String   @id @default(cuid())
  title       String
  category    String // MAINTENANCE, FUEL, MATERIALS, OTHER
  amount      Float
  currency    String   @default("KWD")
  description String?
  receipts    String? // JSON string of receipt URLs array
  expenseDate DateTime
  approvedBy  String?
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  @@map("expenses")
}

// Invoice Settings
model InvoiceSettings {
  id              String   @id @default(cuid())
  companyId       String   @unique
  templateType    String   @default("MODERN")
  primaryColor    String   @default("#2563eb")
  secondaryColor  String   @default("#64748b")
  showLogo        Boolean  @default(true)
  footerText      String?
  termsConditions String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  @@map("invoice_settings")
}

// Billing Settings with Invoice Customization
model BillingSettings {
  id        String @id @default(cuid())
  companyId String @unique

  // Storage Rates
  storageRateType     String @default("PER_DAY") // PER_DAY, PER_WEEK, PER_MONTH, FLAT
  storageRatePerBox   Float  @default(0.500)
  storageRatePerWeek  Float?
  storageRatePerMonth Float?

  // Tax & Currency
  taxEnabled Boolean @default(true)
  taxRate    Float   @default(5.0)
  currency   String  @default("KWD")

  // Invoice Settings
  invoicePrefix  String @default("INV")
  invoiceDueDays Int    @default(10)

  // Grace Periods
  gracePeriodDays Int   @default(3)
  minimumCharge   Float @default(10.0)

  // Invoice Customization
  logoUrl             String?
  logoPosition        String  @default("LEFT") // LEFT, CENTER, RIGHT
  primaryColor        String  @default("#2563eb")
  secondaryColor      String  @default("#64748b")
  showCompanyDetails  Boolean @default(true)
  showBankDetails     Boolean @default(true)
  showTermsConditions Boolean @default(true)

  // Bank Details
  bankName      String?
  accountNumber String?
  accountName   String?
  iban          String?
  swiftCode     String?

  // Terms & Conditions
  invoiceFooterText   String?
  termsAndConditions  String?
  paymentInstructions String?

  // Additional Fields
  taxRegistrationNo     String?
  companyRegistrationNo String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company     Company      @relation(fields: [companyId], references: [id])
  chargeTypes ChargeType[]

  @@map("billing_settings")
}

// Custom Charge Types
model ChargeType {
  id                String @id @default(cuid())
  companyId         String
  billingSettingsId String

  // Charge Details
  name        String
  code        String
  description String?
  category    String // STORAGE, RELEASE, SERVICE, OTHER

  // Calculation Method
  calculationType String // PER_BOX, PER_SHIPMENT, PERCENTAGE, FLAT, PER_DAY, PER_KG, PER_HOUR, PER_CUBIC_M
  rate            Float

  // Advanced Options
  minCharge      Float?
  maxCharge      Float?
  applyOnRelease Boolean @default(true)
  applyOnStorage Boolean @default(false)
  isTaxable      Boolean @default(true)
  isActive       Boolean @default(true)
  isDefault      Boolean @default(false)

  // Display
  displayOrder Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company         Company         @relation(fields: [companyId], references: [id])
  billingSettings BillingSettings @relation(fields: [billingSettingsId], references: [id])

  @@unique([companyId, code])
  @@map("charge_types")
}

// Invoices
model Invoice {
  id            String  @id @default(cuid())
  invoiceNumber String  @unique
  companyId     String
  shipmentId    String
  clientName    String
  clientPhone   String?
  clientAddress String?

  // Invoice Details
  invoiceDate DateTime @default(now())
  dueDate     DateTime
  invoiceType String   @default("STORAGE") // STORAGE, PARTIAL, PERIODIC

  // Warehouse Integration Fields (Non-breaking additions)
  isWarehouseInvoice Boolean @default(false) // Flag for warehouse vs regular invoices
  warehouseData      String? // JSON string for storage calculation details and metadata

  // Amounts
  subtotal       Float
  taxAmount      Float
  discountAmount Float @default(0)
  totalAmount    Float

  // Payment Info
  paymentStatus  String    @default("PENDING") // PENDING, PAID, PARTIAL, OVERDUE, CANCELLED
  paidAmount     Float     @default(0)
  balanceDue     Float
  paymentDate    DateTime?
  paymentMethod  String?
  transactionRef String?

  // Additional Info
  notes              String?
  termsAndConditions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company   Company           @relation(fields: [companyId], references: [id])
  shipment  Shipment          @relation(fields: [shipmentId], references: [id])
  lineItems InvoiceLineItem[]
  payments  Payment[]

  @@map("invoices")
}

// Invoice Line Items
model InvoiceLineItem {
  id        String @id @default(cuid())
  invoiceId String
  companyId String

  // Line Item Details
  chargeTypeId String?
  description  String
  category     String

  // Calculation Details
  quantity  Float @default(1)
  unitPrice Float
  amount    Float

  // Tax
  isTaxable Boolean @default(true)
  taxRate   Float?
  taxAmount Float   @default(0)

  // Display
  displayOrder Int @default(0)

  createdAt DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id])

  @@map("invoice_line_items")
}

// Payments
model Payment {
  id        String @id @default(cuid())
  invoiceId String
  companyId String

  amount         Float
  paymentDate    DateTime @default(now())
  paymentMethod  String // CASH, CARD, BANK_TRANSFER, KNET
  transactionRef String?
  receiptNumber  String?

  notes     String?
  createdBy String?

  createdAt DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("payments")
}

// Shipment Charges Tracking
model ShipmentCharges {
  id         String @id @default(cuid())
  shipmentId String @unique
  companyId  String

  // Current Charges
  currentStorageCharge Float    @default(0)
  daysStored           Int      @default(0)
  lastCalculatedDate   DateTime @default(now())

  // Released Items Tracking
  totalBoxesReleased Int   @default(0)
  totalInvoiced      Float @default(0)
  totalPaid          Float @default(0)
  outstandingBalance Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shipment Shipment @relation(fields: [shipmentId], references: [id])
  company  Company  @relation(fields: [companyId], references: [id])

  @@map("shipment_charges")
}

// Custom Fields
model CustomField {
  id           String   @id @default(cuid())
  companyId    String
  fieldName    String
  fieldType    String // TEXT, NUMBER, DATE, DROPDOWN, CHECKBOX
  fieldOptions String? // JSON string of options array
  isRequired   Boolean  @default(false)
  isActive     Boolean  @default(true)
  section      String   @default("SHIPMENT") // SHIPMENT, JOB, EXPENSE
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company Company            @relation(fields: [companyId], references: [id])
  values  CustomFieldValue[]

  @@map("custom_fields")
}

// Custom Field Values - Stores actual data for custom fields
model CustomFieldValue {
  id            String   @id @default(cuid())
  customFieldId String
  entityType    String // SHIPMENT, JOB, EXPENSE
  entityId      String // ID of shipment/job/expense
  fieldValue    String // Stored as string, converted based on fieldType
  companyId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customField CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([customFieldId, entityId])
  @@index([entityType, entityId])
  @@map("custom_field_values")
}

// Shipment & Release Configuration Settings
model ShipmentSettings {
  id        String @id @default(cuid())
  companyId String @unique

  // Shipment Intake Settings
  requireClientEmail    Boolean @default(false)
  requireClientPhone    Boolean @default(true)
  requireEstimatedValue Boolean @default(false)
  requirePhotos         Boolean @default(false)
  autoGenerateQR        Boolean @default(true)
  qrCodePrefix          String  @default("SHP")

  // 🚀 INTAKE FORM FIELD VISIBILITY & REQUIREMENTS
  showClientAddress    Boolean @default(true)
  requireClientAddress Boolean @default(false)
  showDescription      Boolean @default(true)
  requireDescription   Boolean @default(false)
  showReferenceId      Boolean @default(true)
  requireReferenceId   Boolean @default(false)
  showNotes            Boolean @default(true)
  requireNotes         Boolean @default(false)

  // Warehouse Shipment Fields
  showWarehouseMode       Boolean @default(true)
  showShipperDetails      Boolean @default(true)
  requireShipperDetails   Boolean @default(true) // When warehouse mode enabled
  showConsigneeDetails    Boolean @default(true)
  requireConsigneeDetails Boolean @default(true) // When warehouse mode enabled
  showWeight              Boolean @default(true)
  requireWeight           Boolean @default(false)
  showDimensions          Boolean @default(true)
  requireDimensions       Boolean @default(false)
  showStorageType         Boolean @default(true)
  showSpecialInstructions Boolean @default(true)

  // Storage Assignment Fields
  showEstimatedDays    Boolean @default(true)
  requireEstimatedDays Boolean @default(false)
  defaultEstimatedDays Int     @default(30)

  // 🚀 FORM SECTION ORDERING
  formSectionOrder String? // JSON array: ["basic", "warehouse", "storage", "custom", "pricing"]

  // Storage Settings
  defaultStorageType    String  @default("PERSONAL") // PERSONAL, COMMERCIAL
  allowMultipleRacks    Boolean @default(false)
  requireRackAssignment Boolean @default(false)
  autoAssignRack        Boolean @default(false)
  notifyOnLowCapacity   Boolean @default(true)
  lowCapacityThreshold  Int     @default(80) // Percentage

  // Release Settings
  requireReleaseApproval Boolean @default(false)
  releaseApproverRole    String  @default("MANAGER") // MANAGER, ADMIN
  requireReleasePhotos   Boolean @default(false)
  requireIDVerification  Boolean @default(true)
  generateReleaseInvoice Boolean @default(true)
  autoSendInvoiceEmail   Boolean @default(false)

  // Pricing & Charges
  storageRatePerDay Float   @default(2.0) // KWD
  storageRatePerBox Float   @default(0.0) // 0 = charge by day only
  chargePartialDay  Boolean @default(true)
  minimumChargeDays Int     @default(1)

  // Release Charges
  releaseHandlingFee  Float @default(0.0)
  releasePerBoxFee    Float @default(0.0)
  releaseTransportFee Float @default(0.0)

  // Notifications
  notifyClientOnIntake  Boolean @default(true)
  notifyClientOnRelease Boolean @default(true)
  notifyOnStorageAlert  Boolean @default(true)
  storageAlertDays      Int     @default(30) // Alert after X days

  // Custom Field Settings
  enableCustomFields   Boolean @default(true)
  requiredCustomFields String? // JSON array of custom field IDs

  // Partial Release Settings
  allowPartialRelease    Boolean @default(true)
  partialReleaseMinBoxes Int     @default(1)
  requirePartialApproval Boolean @default(false)

  // Documentation
  requireReleaseSignature Boolean @default(true)
  requireCollectorID      Boolean @default(true)
  allowProxyCollection    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  @@map("shipment_settings")
}

// Template Settings - Invoice and Release Note Customization
model TemplateSettings {
  id        String  @id @default(cuid())
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Company Branding
  companyName    String?
  companyLogo    String?
  companyAddress String?
  companyPhone   String?
  companyEmail   String?
  companyWebsite String?
  companyLicense String?

  // Invoice Template
  invoiceTemplateType   String?
  invoiceTitle          String?
  invoiceShowLogo       Boolean?
  invoiceShowAddress    Boolean?
  invoiceShowPhone      Boolean?
  invoiceShowEmail      Boolean?
  invoiceShowWebsite    Boolean?
  invoiceShowLicense    Boolean?
  invoiceShowFooter     Boolean?
  invoiceHeaderBg       String?
  invoiceHeaderText     String?
  invoiceFooterText     String?
  invoiceTerms          String?
  invoiceShowBorders    Boolean?
  invoiceShowGrid       Boolean?
  invoiceTableStyle     String?
  invoiceFontSize       String?
  invoicePaperSize      String?
  invoicePrimaryColor   String?
  invoiceSecondaryColor String?
  invoiceAccentColor    String?
  invoiceDangerColor    String?

  // Release Note Template
  releaseNoteTemplate   String?
  releaseNoteTitle      String?
  releaseNoteHeaderBg   String?
  releaseNoteShowLogo   Boolean?
  releaseShowShipment   Boolean?
  releaseShowStorage    Boolean?
  releaseShowItems      Boolean?
  releaseShowCollector  Boolean?
  releaseShowCharges    Boolean?
  releaseShowPhotos     Boolean?
  releaseShowTerms      Boolean?
  releaseShowSignatures Boolean?
  releaseTerms          String?
  releaseFooterText     String?
  releasePrimaryColor   String?

  // Print Settings
  printMarginTop    Int?
  printMarginBottom Int?
  printMarginLeft   Int?
  printMarginRight  Int?

  // Localization
  language         String?
  dateFormat       String?
  timeFormat       String?
  currencySymbol   String?
  currencyPosition String?

  // Custom Fields
  customField1Label String?
  customField1Value String?
  customField2Label String?
  customField2Value String?
  customField3Label String?
  customField3Value String?

  // Signature Settings
  requireStaffSignature  Boolean?
  requireClientSignature Boolean?
  signatureHeight        Int?

  // QR Code Settings
  showQRCode     Boolean?
  qrCodePosition String?
  qrCodeSize     Int?

  // Watermark Settings
  showWatermark    Boolean?
  watermarkText    String?
  watermarkOpacity Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("template_settings")
}

// RBAC System - Permissions
model Permission {
  id          String   @id @default(cuid())
  resource    String // SHIPMENTS, RACKS, INVOICES, PAYMENTS, EXPENSES, MOVING_JOBS, USERS, SETTINGS, REPORTS, DASHBOARD, CUSTOM_FIELDS, BILLING
  action      String // VIEW, CREATE, EDIT, DELETE, APPROVE, EXPORT, MANAGE
  description String? // Human-readable description
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

// RBAC System - Role-Permission Mapping
model RolePermission {
  id           String   @id @default(cuid())
  role         String // ADMIN, MANAGER, WORKER
  permissionId String
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId, companyId])
  @@map("role_permissions")
}

// ==================== MOVING JOB MANAGEMENT ====================

model MovingJob {
  id             String   @id @default(cuid())
  jobCode        String   @unique
  jobTitle       String
  clientName     String
  clientPhone    String
  clientEmail    String?
  jobDate        DateTime
  jobAddress     String
  dropoffAddress String?
  status         String   @default("PLANNED") // Allowed: PLANNED, DISPATCHED, IN_PROGRESS, COMPLETED, CLOSED, CANCELLED
  teamLeaderId   String?
  driverName     String?
  vehicleNumber  String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime? // Soft delete: null = active, has timestamp = deleted
  companyId      String

  company         Company            @relation(fields: [companyId], references: [id])
  teamLeader      User?              @relation("MovingJobTeamLead", fields: [teamLeaderId], references: [id])
  assignments     JobAssignment[]
  materialIssues  MaterialIssue[]
  materialReturns MaterialReturn[]
  costSnapshots   JobCostSnapshot[]
  approvals       MaterialApproval[]
  files           JobFile[]          // NEW: Job documents and files

  @@index([deletedAt]) // Index for filtering active jobs
  @@map("moving_jobs")
}

// Job Files & Documents (NEW)
model JobFile {
  id           Int      @id @default(autoincrement())
  jobId        String
  fileName     String   @db.VarChar(255)
  originalName String   @db.VarChar(255)
  filePath     String   @db.VarChar(500)
  fileSize     Int
  mimeType     String   @db.VarChar(100)
  folderName   String?  @db.VarChar(100)
  uploadedBy   String   @db.VarChar(191)
  uploadedAt   DateTime @default(now())
  description  String?  @db.Text

  job          MovingJob @relation(fields: [jobId], references: [id], onDelete: Restrict)
  user         User      @relation("JobFileUploads", fields: [uploadedBy], references: [id], onDelete: Restrict)

  @@index([jobId])
  @@index([uploadedBy])
  @@index([folderName])
  @@map("job_files")
}

model JobAssignment {
  id          String    @id @default(cuid())
  jobId       String
  userId      String
  role        String // Allowed: TEAM_LEAD, LABOR, DRIVER, HELPER, SUPERVISOR
  checkInAt   DateTime?
  checkOutAt  DateTime?
  hourlyRate  Float?
  hoursWorked Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyId   String

  job     MovingJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id])
  company Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId, role])
  @@map("job_assignments")
}

model MaterialCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   MaterialCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children MaterialCategory[] @relation("CategoryHierarchy")
  materials PackingMaterial[]
  company   Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([name, companyId])
  @@index([companyId])
  @@index([parentId])
  @@map("material_categories")
}

model PackingMaterial {
  id            String   @id @default(cuid())
  sku           String
  name          String
  description   String?
  unit          String   @default("PCS")
  category      String   // Legacy field
  categoryId    String?  // New foreign key to MaterialCategory
  minStockLevel Int      @default(0)
  totalQuantity Int      @default(0) // Total stock available
  unitCost      Float?   // Cost per unit
  sellingPrice  Float?   // Selling price per unit
  isActive      Boolean  @default(true)
  companyId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  materialCategory MaterialCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  company          Company           @relation(fields: [companyId], references: [id])
  stockBatches     StockBatch[]
  rackLevels       RackStockLevel[]
  materialIssues   MaterialIssue[]
  materialReturns  MaterialReturn[]
  materialDamages  MaterialDamage[]
  materialUsages   MaterialUsage[]      // NEW: Track material consumption
  materialTransfers MaterialTransfer[]  // NEW: Track transfers
  stockAlerts      StockAlert[]         // NEW: Low stock alerts
  purchaseOrderItems PurchaseOrderItem[] // NEW: Purchase history
  priceHistory     MaterialPriceHistory[] // NEW: Price tracking

  @@unique([sku, companyId])
  @@index([categoryId])
  @@map("packing_materials")
}

model Vendor {
  id        String   @id @default(cuid())
  name      String
  contact   String?
  phone     String?
  email     String?
  address   String?  // NEW: Vendor address
  rating    Float?   // NEW: Vendor rating (0-5)
  notes     String?
  isActive  Boolean  @default(true)  // NEW: Active/inactive status
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company         Company                @relation(fields: [companyId], references: [id])
  stockBatches    StockBatch[]
  purchaseOrders  PurchaseOrder[]        // NEW: Purchase orders
  priceHistory    MaterialPriceHistory[] // NEW: Price history

  @@unique([name, companyId])
  @@map("vendors")
}

model StockBatch {
  id                String   @id @default(cuid())
  batchNumber       String?  // Batch identifier (optional)
  materialId        String
  vendorId          String?
  vendorName        String?
  purchaseOrder     String?
  purchaseDate      DateTime @default(now())
  quantityPurchased Int
  quantityRemaining Int
  unitCost          Float
  sellingPrice      Float?
  receivedById      String?
  notes             String?
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  material        PackingMaterial  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  vendor          Vendor?          @relation(fields: [vendorId], references: [id])
  receivedBy      User?            @relation("StockBatchReceivedBy", fields: [receivedById], references: [id])
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rackAllocations RackStockLevel[]
  issues          MaterialIssue[]

  @@map("stock_batches")
}

model RackStockLevel {
  id           String   @id @default(cuid())
  materialId   String
  rackId       String
  stockBatchId String?
  quantity     Int
  lastUpdated  DateTime @default(now())
  companyId    String

  material   PackingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  rack       Rack            @relation("RackMaterialLevels", fields: [rackId], references: [id])
  stockBatch StockBatch?     @relation(fields: [stockBatchId], references: [id])
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([materialId, rackId, stockBatchId])
  @@map("rack_stock_levels")
}

model MaterialIssue {
  id           String   @id @default(cuid())
  jobId        String
  materialId   String
  stockBatchId String?
  quantity     Int
  unitCost     Float
  totalCost    Float
  rackId       String? // Rack where material is stored for this job
  issuedById   String?
  issuedAt     DateTime @default(now())
  notes        String?
  companyId    String

  job        MovingJob        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  material   PackingMaterial  @relation(fields: [materialId], references: [id])
  stockBatch StockBatch?      @relation(fields: [stockBatchId], references: [id])
  rack       Rack?            @relation("JobMaterialRack", fields: [rackId], references: [id])
  issuedBy   User?            @relation("MaterialIssuedBy", fields: [issuedById], references: [id])
  company    Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  returns    MaterialReturn[]

  @@map("material_issues")
}

model MaterialReturn {
  id              String    @id @default(cuid())
  jobId           String
  materialId      String
  issueId         String?
  quantityIssued  Int?
  quantityUsed    Int?
  quantityGood    Int       @default(0)
  quantityDamaged Int       @default(0)
  restocked       Boolean   @default(false)
  restockedAt     DateTime?
  rackId          String?
  recordedById    String?
  recordedAt      DateTime  @default(now())
  notes           String?
  companyId       String

  job        MovingJob         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  material   PackingMaterial   @relation(fields: [materialId], references: [id])
  issue      MaterialIssue?    @relation(fields: [issueId], references: [id])
  rack       Rack?             @relation(fields: [rackId], references: [id])
  recordedBy User?             @relation("MaterialReturnRecordedBy", fields: [recordedById], references: [id])
  damages    MaterialDamage[]
  approval   MaterialApproval? @relation("ReturnApproval")
  company    Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("material_returns")
}

model MaterialDamage {
  id              String    @id @default(cuid())
  returnId        String
  materialId      String
  quantity        Int
  reason          String?
  photoUrls       String?
  status          String    @default("PENDING") // Allowed: PENDING, APPROVED, REJECTED
  recordedById    String?
  recordedAt      DateTime  @default(now())
  approvedById    String?
  approvedAt      DateTime?
  approvalNotes   String?
  rejectionReason String?
  companyId       String

  material   PackingMaterial   @relation(fields: [materialId], references: [id])
  return     MaterialReturn    @relation(fields: [returnId], references: [id], onDelete: Cascade)
  recordedBy User?             @relation("DamageRecordedBy", fields: [recordedById], references: [id])
  approvedBy User?             @relation("DamageApprovedBy", fields: [approvedById], references: [id])
  approval   MaterialApproval? @relation("DamageApproval")
  company    Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("material_damages")
}

model MaterialApproval {
  id              String    @id @default(cuid())
  jobId           String
  approvalType    String // Allowed: RETURN, DAMAGE, STOCK_IN
  status          String    @default("PENDING") // Allowed: PENDING, APPROVED, REJECTED
  requestedById   String?
  requestedAt     DateTime  @default(now())
  decisionById    String?
  decidedAt       DateTime?
  decisionNotes   String?
  subjectReturnId String?   @unique
  subjectDamageId String?   @unique
  companyId       String

  job           MovingJob       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  requestedBy   User?           @relation("ApprovalRequestedBy", fields: [requestedById], references: [id])
  decisionBy    User?           @relation("ApprovalDecidedBy", fields: [decisionById], references: [id])
  subjectReturn MaterialReturn? @relation("ReturnApproval", fields: [subjectReturnId], references: [id])
  subjectDamage MaterialDamage? @relation("DamageApproval", fields: [subjectDamageId], references: [id])
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("material_approvals")
}

model JobCostSnapshot {
  id            String   @id @default(cuid())
  jobId         String
  recordedAt    DateTime @default(now())
  materialsCost Float    @default(0)
  laborCost     Float    @default(0)
  damageLoss    Float    @default(0)
  otherCost     Float    @default(0)
  revenue       Float    @default(0)
  profit        Float    @default(0)
  profitMargin  Float?
  currency      String   @default("KWD")
  notes         String?
  companyId     String

  job     MovingJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  company Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("job_cost_snapshots")
}

// ==================== PLUGIN SYSTEM ====================

model SystemPlugin {
  id            String    @id @default(cuid())
  name          String
  description   String?
  version       String    @default("1.0.0")
  status        String    @default("INSTALLED") // Allowed: INSTALLED, ACTIVE, DISABLED, ERROR
  entryPointUrl String?
  checksum      String?
  installedAt   DateTime  @default(now())
  activatedAt   DateTime?
  deactivatedAt DateTime?
  companyId     String

  company   Company           @relation(fields: [companyId], references: [id])
  auditLogs SystemPluginLog[]

  @@unique([name, companyId])
  @@map("system_plugins")
}

model SystemPluginLog {
  id          String   @id @default(cuid())
  pluginId    String
  action      String
  status      String
  message     String?
  performedBy String?
  createdAt   DateTime @default(now())
  companyId   String

  plugin  SystemPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  company Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("system_plugin_logs")
}

// ==================== ENHANCED MATERIAL SYSTEM ====================

// Material Usage/Consumption tracking (linked to shipments)
model MaterialUsage {
  id              String   @id @default(cuid())
  materialId      String
  shipmentId      String?  // Which shipment used this material
  stockBatchId    String?
  quantityUsed    Int
  unitCost        Float
  totalCost       Float
  usageType       String   @default("PACKING") // PACKING, LOADING, UNLOADING, OTHER
  usedById        String?
  usedAt          DateTime @default(now())
  notes           String?
  companyId       String
  createdAt       DateTime @default(now())

  material   PackingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  shipment   Shipment?       @relation(fields: [shipmentId], references: [id], onDelete: SetNull)
  usedBy     User?           @relation("MaterialUsedBy", fields: [usedById], references: [id])
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([materialId])
  @@index([shipmentId])
  @@map("material_usage")
}

// Material Transfer between warehouses/racks
model MaterialTransfer {
  id                String    @id @default(cuid())
  materialId        String
  fromRackId        String?
  toRackId          String?
  stockBatchId      String?
  quantity          Int
  transferType      String    @default("RACK_TO_RACK") // RACK_TO_RACK, WAREHOUSE_TO_WAREHOUSE
  status            String    @default("PENDING") // PENDING, IN_TRANSIT, COMPLETED, CANCELLED
  requestedById     String?
  approvedById      String?
  completedById     String?
  requestedAt       DateTime  @default(now())
  approvedAt        DateTime?
  completedAt       DateTime?
  notes             String?
  companyId         String

  material      PackingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  fromRack      Rack?           @relation("TransferFromRack", fields: [fromRackId], references: [id])
  toRack        Rack?           @relation("TransferToRack", fields: [toRackId], references: [id])
  requestedBy   User?           @relation("TransferRequestedBy", fields: [requestedById], references: [id])
  approvedBy    User?           @relation("TransferApprovedBy", fields: [approvedById], references: [id])
  completedBy   User?           @relation("TransferCompletedBy", fields: [completedById], references: [id])
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([materialId])
  @@index([status])
  @@map("material_transfers")
}

// Stock alerts and notifications
model StockAlert {
  id                String    @id @default(cuid())
  materialId        String
  alertType         String    @default("LOW_STOCK") // LOW_STOCK, OUT_OF_STOCK, EXPIRING_SOON, EXPIRED
  threshold         Int?      // Stock level that triggered alert
  currentStock      Int?
  message           String?
  isResolved        Boolean   @default(false)
  resolvedById      String?
  resolvedAt        DateTime?
  notificationSent  Boolean   @default(false)
  notificationSentAt DateTime?
  createdAt         DateTime  @default(now())
  companyId         String

  material   PackingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  resolvedBy User?           @relation("AlertResolvedBy", fields: [resolvedById], references: [id])
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([materialId])
  @@index([isResolved])
  @@map("stock_alerts")
}

// Purchase Orders for materials
model PurchaseOrder {
  id              String    @id @default(cuid())
  orderNumber     String    // PO-2024-001
  vendorId        String?
  vendorName      String?
  orderDate       DateTime  @default(now())
  expectedDate    DateTime?
  receivedDate    DateTime?
  status          String    @default("PENDING") // PENDING, APPROVED, ORDERED, RECEIVED, CANCELLED
  totalAmount     Float     @default(0)
  notes           String?
  createdById     String?
  approvedById    String?
  approvedAt      DateTime?
  companyId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  vendor      Vendor?              @relation(fields: [vendorId], references: [id])
  createdBy   User?                @relation("POCreatedBy", fields: [createdById], references: [id])
  approvedBy  User?                @relation("POApprovedBy", fields: [approvedById], references: [id])
  company     Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items       PurchaseOrderItem[]

  @@unique([orderNumber, companyId])
  @@index([vendorId])
  @@index([status])
  @@map("purchase_orders")
}

// Purchase Order Items
model PurchaseOrderItem {
  id                String   @id @default(cuid())
  purchaseOrderId   String
  materialId        String
  quantity          Int
  unitCost          Float
  totalCost         Float
  receivedQuantity  Int      @default(0)
  companyId         String

  purchaseOrder PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  material      PackingMaterial @relation(fields: [materialId], references: [id])
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("purchase_order_items")
}

// Material price history tracking
model MaterialPriceHistory {
  id          String   @id @default(cuid())
  materialId  String
  vendorId    String?
  unitCost    Float
  sellingPrice Float?
  effectiveDate DateTime @default(now())
  source      String?  // PURCHASE, MANUAL_UPDATE, AUTO_CALCULATED
  companyId   String

  material PackingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  vendor   Vendor?         @relation(fields: [vendorId], references: [id])
  company  Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([materialId])
  @@map("material_price_history")
}
