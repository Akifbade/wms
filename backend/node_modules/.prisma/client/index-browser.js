
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website',
  logo: 'logo',
  plan: 'plan',
  ratePerDay: 'ratePerDay',
  currency: 'currency',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  role: 'role',
  skills: 'skills',
  isActive: 'isActive',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RackScalarFieldEnum = {
  id: 'id',
  code: 'code',
  qrCode: 'qrCode',
  rackType: 'rackType',
  location: 'location',
  capacityTotal: 'capacityTotal',
  capacityUsed: 'capacityUsed',
  minCapacity: 'minCapacity',
  status: 'status',
  lastActivity: 'lastActivity',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RackInventoryScalarFieldEnum = {
  id: 'id',
  rackId: 'rackId',
  itemType: 'itemType',
  itemId: 'itemId',
  quantityCurrent: 'quantityCurrent',
  quantityReserved: 'quantityReserved',
  lastMovement: 'lastMovement',
  updatedBy: 'updatedBy',
  companyId: 'companyId'
};

exports.Prisma.RackActivityScalarFieldEnum = {
  id: 'id',
  rackId: 'rackId',
  userId: 'userId',
  activityType: 'activityType',
  itemDetails: 'itemDetails',
  quantityBefore: 'quantityBefore',
  quantityAfter: 'quantityAfter',
  photos: 'photos',
  notes: 'notes',
  gpsLocation: 'gpsLocation',
  timestamp: 'timestamp',
  companyId: 'companyId'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  referenceId: 'referenceId',
  originalBoxCount: 'originalBoxCount',
  currentBoxCount: 'currentBoxCount',
  type: 'type',
  arrivalDate: 'arrivalDate',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  clientEmail: 'clientEmail',
  description: 'description',
  estimatedValue: 'estimatedValue',
  notes: 'notes',
  qrCode: 'qrCode',
  status: 'status',
  rackId: 'rackId',
  assignedAt: 'assignedAt',
  releasedAt: 'releasedAt',
  storageCharge: 'storageCharge',
  companyId: 'companyId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShipmentBoxScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  boxNumber: 'boxNumber',
  qrCode: 'qrCode',
  rackId: 'rackId',
  status: 'status',
  assignedAt: 'assignedAt',
  releasedAt: 'releasedAt',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  withdrawnBoxCount: 'withdrawnBoxCount',
  remainingBoxCount: 'remainingBoxCount',
  withdrawalDate: 'withdrawalDate',
  status: 'status',
  reason: 'reason',
  notes: 'notes',
  photos: 'photos',
  receiptNumber: 'receiptNumber',
  withdrawnBy: 'withdrawnBy',
  authorizedBy: 'authorizedBy',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MovingJobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  jobType: 'jobType',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  fromAddress: 'fromAddress',
  toAddress: 'toAddress',
  scheduledDate: 'scheduledDate',
  estimatedHours: 'estimatedHours',
  status: 'status',
  totalCost: 'totalCost',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobAssignmentScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  userId: 'userId',
  role: 'role',
  assignedAt: 'assignedAt',
  companyId: 'companyId'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  category: 'category',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  receipts: 'receipts',
  expenseDate: 'expenseDate',
  approvedBy: 'approvedBy',
  status: 'status',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  templateType: 'templateType',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  showLogo: 'showLogo',
  footerText: 'footerText',
  termsConditions: 'termsConditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  storageRateType: 'storageRateType',
  storageRatePerBox: 'storageRatePerBox',
  storageRatePerWeek: 'storageRatePerWeek',
  storageRatePerMonth: 'storageRatePerMonth',
  taxEnabled: 'taxEnabled',
  taxRate: 'taxRate',
  currency: 'currency',
  invoicePrefix: 'invoicePrefix',
  invoiceDueDays: 'invoiceDueDays',
  gracePeriodDays: 'gracePeriodDays',
  minimumCharge: 'minimumCharge',
  logoUrl: 'logoUrl',
  logoPosition: 'logoPosition',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  showCompanyDetails: 'showCompanyDetails',
  showBankDetails: 'showBankDetails',
  showTermsConditions: 'showTermsConditions',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountName: 'accountName',
  iban: 'iban',
  swiftCode: 'swiftCode',
  invoiceFooterText: 'invoiceFooterText',
  termsAndConditions: 'termsAndConditions',
  paymentInstructions: 'paymentInstructions',
  taxRegistrationNo: 'taxRegistrationNo',
  companyRegistrationNo: 'companyRegistrationNo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChargeTypeScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  billingSettingsId: 'billingSettingsId',
  name: 'name',
  code: 'code',
  description: 'description',
  category: 'category',
  calculationType: 'calculationType',
  rate: 'rate',
  minCharge: 'minCharge',
  maxCharge: 'maxCharge',
  applyOnRelease: 'applyOnRelease',
  applyOnStorage: 'applyOnStorage',
  isTaxable: 'isTaxable',
  isActive: 'isActive',
  isDefault: 'isDefault',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  companyId: 'companyId',
  shipmentId: 'shipmentId',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  clientAddress: 'clientAddress',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  invoiceType: 'invoiceType',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  paymentStatus: 'paymentStatus',
  paidAmount: 'paidAmount',
  balanceDue: 'balanceDue',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  transactionRef: 'transactionRef',
  notes: 'notes',
  termsAndConditions: 'termsAndConditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceLineItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  chargeTypeId: 'chargeTypeId',
  description: 'description',
  category: 'category',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  amount: 'amount',
  isTaxable: 'isTaxable',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  transactionRef: 'transactionRef',
  receiptNumber: 'receiptNumber',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ShipmentChargesScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  companyId: 'companyId',
  currentStorageCharge: 'currentStorageCharge',
  daysStored: 'daysStored',
  lastCalculatedDate: 'lastCalculatedDate',
  totalBoxesReleased: 'totalBoxesReleased',
  totalInvoiced: 'totalInvoiced',
  totalPaid: 'totalPaid',
  outstandingBalance: 'outstandingBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomFieldScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  fieldName: 'fieldName',
  fieldType: 'fieldType',
  fieldOptions: 'fieldOptions',
  isRequired: 'isRequired',
  isActive: 'isActive',
  section: 'section',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomFieldValueScalarFieldEnum = {
  id: 'id',
  customFieldId: 'customFieldId',
  entityType: 'entityType',
  entityId: 'entityId',
  fieldValue: 'fieldValue',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Company: 'Company',
  User: 'User',
  Rack: 'Rack',
  RackInventory: 'RackInventory',
  RackActivity: 'RackActivity',
  Shipment: 'Shipment',
  ShipmentBox: 'ShipmentBox',
  Withdrawal: 'Withdrawal',
  MovingJob: 'MovingJob',
  JobAssignment: 'JobAssignment',
  Expense: 'Expense',
  InvoiceSettings: 'InvoiceSettings',
  BillingSettings: 'BillingSettings',
  ChargeType: 'ChargeType',
  Invoice: 'Invoice',
  InvoiceLineItem: 'InvoiceLineItem',
  Payment: 'Payment',
  ShipmentCharges: 'ShipmentCharges',
  CustomField: 'CustomField',
  CustomFieldValue: 'CustomFieldValue'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
