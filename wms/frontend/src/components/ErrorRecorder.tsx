import React, { useState, useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { Download, Trash2, Minimize2, Maximize2, AlertCircle } from 'lucide-react';

interface ConsoleError {
  timestamp: string;
  type: 'error' | 'warn' | 'info';
  message: string;
  stack?: string;
}

const ErrorRecorder: React.FC = () => {
  console.log('ErrorRecorder component is being executed');
  const [errors, setErrors] = useState<ConsoleError[]>([]);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isRecording, setIsRecording] = useState(true);
  const [position, setPosition] = useState({ x: window.innerWidth / 2 - 220, y: 10 }); // Top-center
  const [isDragging, setIsDragging] = useState(false);
  const dragRef = useRef<{ startX: number; startY: number } | null>(null);

  // Debug: Check if component mounted
  useEffect(() => {
    console.log('üî¥ ErrorRecorder mounted!', { position, windowWidth: window.innerWidth });
    console.log('üî¥ ErrorRecorder is VISIBLE and READY!');
  }, []);

  // Intercept console errors
  useEffect(() => {
    if (!isRecording) return;

    const originalError = console.error;
    const originalWarn = console.warn;

    console.error = (...args: any[]) => {
      originalError.apply(console, args);
      addError('error', args);
    };

    console.warn = (...args: any[]) => {
      originalWarn.apply(console, args);
      addError('warn', args);
    };

    // Capture uncaught errors
    const handleError = (event: ErrorEvent) => {
      addError('error', [event.message], event.error?.stack);
    };

    // Capture unhandled promise rejections
    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {
      addError('error', [event.reason]);
    };

    window.addEventListener('error', handleError);
    window.addEventListener('unhandledrejection', handleUnhandledRejection);

    return () => {
      console.error = originalError;
      console.warn = originalWarn;
      window.removeEventListener('error', handleError);
      window.removeEventListener('unhandledrejection', handleUnhandledRejection);
    };
  }, [isRecording]);

  const addError = (type: 'error' | 'warn' | 'info', args: any[], stack?: string) => {
    const message = args.map(arg => {
      if (typeof arg === 'object') {
        try {
          return JSON.stringify(arg, null, 2);
        } catch {
          return String(arg);
        }
      }
      return String(arg);
    }).join(' ');

    const error: ConsoleError = {
      timestamp: new Date().toISOString(),
      type,
      message,
      stack
    };

    setErrors(prev => [...prev, error]);
  };

  const generateReport = () => {
    const report = `# Console Error Report
Generated: ${new Date().toLocaleString()}
Total Errors: ${errors.filter(e => e.type === 'error').length}
Total Warnings: ${errors.filter(e => e.type === 'warn').length}

---

## Errors Log

${errors.map((error, index) => `
### ${index + 1}. [${error.type.toUpperCase()}] ${error.timestamp}

**Message:**
\`\`\`
${error.message}
\`\`\`

${error.stack ? `**Stack Trace:**
\`\`\`
${error.stack}
\`\`\`
` : ''}
---
`).join('\n')}

## Summary

- Total Entries: ${errors.length}
- Errors: ${errors.filter(e => e.type === 'error').length}
- Warnings: ${errors.filter(e => e.type === 'warn').length}
- Recording Status: ${isRecording ? 'Active' : 'Stopped'}

---
*Generated by Console Error Recorder*
`;

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `error-report-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearErrors = () => {
    if (window.confirm('Clear all recorded errors?')) {
      setErrors([]);
    }
  };

  const handleMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true);
    dragRef.current = {
      startX: e.clientX - position.x,
      startY: e.clientY - position.y
    };
  };

  const handleMouseMove = (e: MouseEvent) => {
    if (isDragging && dragRef.current) {
      setPosition({
        x: e.clientX - dragRef.current.startX,
        y: e.clientY - dragRef.current.startY
      });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  useEffect(() => {
    if (isDragging) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      return () => {
        window.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging]);

  const errorCount = errors.filter(e => e.type === 'error').length;
  const warnCount = errors.filter(e => e.type === 'warn').length;

  const ui = (
    <>
      <div style={{
        position: 'fixed',
        left: 0,
        top: 0,
        width: '100vw',
        background: '#ff1744',
        color: '#fff',
        fontWeight: 'bold',
        fontSize: '20px',
        textAlign: 'center',
        zIndex: 2147483647,
        padding: '8px',
        pointerEvents: 'auto',
      }}>
        DEBUG: Error Recorder component is mounted!
      </div>
      <div
        style={{
          position: 'fixed',
          left: '50%',
          top: '50px',
          transform: 'translateX(-50%)',
          width: isMinimized ? 'auto' : '480px',
          maxHeight: isMinimized ? 'auto' : '700px',
          background: '#fffbe6',
          border: '5px solid #ff1744',
          boxShadow: '0 0 32px 8px #ff1744',
          padding: '2px',
          zIndex: 2147483647,
          pointerEvents: 'auto',
        }}
        className="error-recorder-blink"
      >
        {/* Fallback message if not visible */}
        <noscript>
          <div style={{color: 'red', fontWeight: 'bold', fontSize: '18px', background: '#fffbe6', padding: '10px', border: '2px solid #ff1744', textAlign: 'center'}}>Error Recorder should be visible here. If not, check your browser extensions or CSS overrides.</div>
        </noscript>

        {/* Header */}
        <div
          onMouseDown={handleMouseDown}
          className="bg-gradient-to-r from-red-600 to-red-700 text-white p-3 cursor-move select-none flex items-center justify-between"
        >
        <div className="flex items-center space-x-2">
          <AlertCircle className="h-5 w-5" />
          <span className="font-semibold">Error Recorder</span>
          {!isMinimized && (
            <span className="text-xs bg-red-800 px-2 py-1 rounded">
              {errorCount}E / {warnCount}W
            </span>
          )}
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setIsMinimized(!isMinimized)}
            className="hover:bg-red-800 p-1 rounded"
          >
            {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
          </button>
        </div>
      </div>

      {/* Body */}
      {!isMinimized && (
        <>
          {/* Controls */}
          <div className="p-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <button
                onClick={() => setIsRecording(!isRecording)}
                className={`px-3 py-1 rounded text-sm font-medium ${
                  isRecording
                    ? 'bg-red-600 text-white'
                    : 'bg-gray-300 text-gray-700'
                }`}
              >
                {isRecording ? '‚è∫ Recording' : '‚è∏ Paused'}
              </button>
              <span className="text-xs text-gray-600">{errors.length} entries</span>
            </div>
            <div className="flex items-center space-x-1">
              <button
                onClick={generateReport}
                disabled={errors.length === 0}
                className="p-2 hover:bg-gray-200 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                title="Download Report"
              >
                <Download className="h-4 w-4 text-gray-700" />
              </button>
              <button
                onClick={clearErrors}
                disabled={errors.length === 0}
                className="p-2 hover:bg-gray-200 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                title="Clear All"
              >
                <Trash2 className="h-4 w-4 text-gray-700" />
              </button>
            </div>
          </div>

          {/* Error List */}
          <div className="overflow-y-auto" style={{ maxHeight: '480px' }}>
            {errors.length === 0 ? (
              <div className="p-8 text-center text-gray-500">
                <AlertCircle className="h-12 w-12 mx-auto mb-2 opacity-30" />
                <p className="text-sm">No errors recorded yet</p>
                <p className="text-xs mt-1">Errors will appear here when they occur</p>
              </div>
            ) : (
              <div className="divide-y divide-gray-200">
                {errors.map((error, index) => (
                  <div key={index} className="p-3 hover:bg-gray-50">
                    <div className="flex items-start space-x-2">
                      <span
                        className={`px-2 py-1 rounded text-xs font-medium ${
                          error.type === 'error'
                            ? 'bg-red-100 text-red-800'
                            : error.type === 'warn'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-blue-100 text-blue-800'
                        }`}
                      >
                        {error.type.toUpperCase()}
                      </span>
                      <div className="flex-1 min-w-0">
                        <p className="text-xs text-gray-500">
                          {new Date(error.timestamp).toLocaleTimeString()}
                        </p>
                        <p className="text-sm text-gray-900 mt-1 break-words font-mono">
                          {error.message.length > 200
                            ? error.message.substring(0, 200) + '...'
                            : error.message}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </>
      )}
    </div>
  </>
);

  // Render into document.body to avoid being affected by app layout stacking contexts
  if (typeof document !== 'undefined' && document.body) {
    return createPortal(ui, document.body);
  }

  return ui;
};

export default ErrorRecorder;
