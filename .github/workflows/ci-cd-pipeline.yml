name: CI/CD Pipeline - Safe Deployment

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # STAGE 1: TEST & BUILD
  # ==========================================
  test-build:
    name: Test & Build
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: warehouse_wms
          MYSQL_USER: wms_user
          MYSQL_PASSWORD: wmspassword123
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (Backend)
        working-directory: ./backend
        run: npm ci

      - name: Install dependencies (Frontend)
        working-directory: ./frontend
        run: npm ci

      - name: Setup Prisma Database
        working-directory: ./backend
        env:
          DATABASE_URL: mysql://wms_user:wmspassword123@localhost:3306/warehouse_wms
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Lint Backend
        working-directory: ./backend
        run: npm run lint || true

      - name: Build Backend
        working-directory: ./backend
        run: npm run build || npm run dev:build || echo "No build script"

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run Backend Tests
        working-directory: ./backend
        run: npm test || echo "No tests configured"
        continue-on-error: true

      - name: Generate Test Report
        if: always()
        run: |
          echo "‚úÖ Build & Tests Completed"
          echo "Environment: ${{ github.ref }}"

  # ==========================================
  # STAGE 2: BUILD DOCKER IMAGES
  # ==========================================
  build-images:
    name: Build Docker Images
    needs: test-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha

      - name: Extract metadata (frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ==========================================
  # STAGE 3: DEPLOY TO STAGING
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.qgocargo.cloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging VPS
        env:
          VPS_HOST: ${{ secrets.STAGING_VPS_HOST }}
          VPS_USER: ${{ secrets.STAGING_VPS_USER }}
          VPS_SSH_KEY: ${{ secrets.STAGING_VPS_SSH_KEY }}
          VPS_PORT: ${{ secrets.STAGING_VPS_PORT }}
        run: |
          mkdir -p ~/.ssh
          echo "$VPS_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${VPS_PORT:-22} $VPS_HOST >> ~/.ssh/known_hosts 2>/dev/null
          
          # Run deployment script with backup
          ssh -i ~/.ssh/deploy_key -p ${VPS_PORT:-22} ${VPS_USER}@${VPS_HOST} << 'EOF'
          cd /root/NEW\ START
          
          # Backup current state
          bash scripts/backup-manager.sh
          
          # Pull latest code
          git pull origin staging
          
          # Deploy with docker compose
          docker compose -f docker-compose.staging.yml pull
          docker compose -f docker-compose.staging.yml up -d
          
          # Run migrations
          docker compose exec -T backend npx prisma migrate deploy
          
          # Health check
          sleep 5
          curl -f http://localhost:8080 || exit 1
          EOF

      - name: Notify Slack (Staging Deploy Success)
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "‚úÖ Staging Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üöÄ *Staging Deploy Success*\n*Branch:* staging\n*Commit:* ${{ github.sha }}\n*URL:* https://staging.qgocargo.cloud"
                  }
                }
              ]
            }

      - name: Notify Slack (Staging Deploy Failed)
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "‚ùå Staging Deployment Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üö® *Staging Deploy Failed*\n*Branch:* staging\n*Commit:* ${{ github.sha }}\n*Check logs for details*"
                  }
                }
              ]
            }

  # ==========================================
  # STAGE 4: MANUAL APPROVAL + DEPLOY TO PRODUCTION
  # ==========================================
  deploy-production:
    name: Deploy to Production
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://qgocargo.cloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Approval
        run: echo "‚è≥ Waiting for manual approval before production deployment..."

      - name: Deploy to Production VPS
        env:
          VPS_HOST: ${{ secrets.PROD_VPS_HOST }}
          VPS_USER: ${{ secrets.PROD_VPS_USER }}
          VPS_SSH_KEY: ${{ secrets.PROD_VPS_SSH_KEY }}
          VPS_PORT: ${{ secrets.PROD_VPS_PORT }}
        run: |
          mkdir -p ~/.ssh
          echo "$VPS_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -p ${VPS_PORT:-22} $VPS_HOST >> ~/.ssh/known_hosts 2>/dev/null
          
          # Run deployment script with backup and rollback capability
          ssh -i ~/.ssh/deploy_key -p ${VPS_PORT:-22} ${VPS_USER}@${VPS_HOST} << 'EOF'
          cd /root/NEW\ START
          
          # Create full backup before deployment
          echo "üì¶ Creating backup..."
          bash scripts/backup-manager.sh "pre-deployment-$(date +%s)"
          
          # Verify backup exists
          if [ ! -d "backups" ] || [ -z "$(ls backups/)" ]; then
            echo "‚ùå Backup failed - aborting deployment"
            exit 1
          fi
          
          # Pull latest code
          echo "üì• Pulling latest code..."
          git pull origin main
          
          # Deploy with docker compose
          echo "üöÄ Deploying..."
          docker compose pull
          docker compose up -d
          
          # Run migrations
          echo "üîÑ Running migrations..."
          docker compose exec -T backend npx prisma migrate deploy
          
          # Health check - try 3 times
          echo "üè• Health check..."
          for i in {1..3}; do
            if curl -f http://localhost:80 > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            if [ $i -lt 3 ]; then
              echo "‚è≥ Retry $i/3..."
              sleep 5
            fi
          done
          
          echo "‚ùå Health check failed - rolling back"
          # Rollback: restore previous backup
          docker compose down
          # Restore from backup (you'll need to implement this)
          exit 1
          EOF

      - name: Notify Slack (Production Deploy Success)
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "‚úÖ Production Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üéâ *Production Deploy Success*\n*Branch:* main\n*Commit:* ${{ github.sha }}\n*URL:* https://qgocargo.cloud"
                  }
                }
              ]
            }

      - name: Notify Slack (Production Deploy Failed)
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          payload: |
            {
              "text": "üö® Production Deployment Failed - ROLLBACK TRIGGERED",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üö® *Production Deploy FAILED - AUTOMATIC ROLLBACK*\n*Branch:* main\n*Commit:* ${{ github.sha }}\n*Please check immediately!*"
                  }
                }
              ]
            }
