version: '3.8'

services:
  # Staging Database - Exact copy of production
  staging-database:
    image: mysql:8.0
    container_name: staging-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: Qgocargo@321
      MYSQL_DATABASE: warehouse_wms
      MYSQL_USER: wms_user
      MYSQL_PASSWORD: wms_pass
    ports:
      - "3308:3306"  # Staging port (different from production 3307)
    volumes:
      - staging_mysql_data:/var/lib/mysql
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pQgocargo@321"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Staging Backend - Exact copy of production setup
  staging-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: staging-backend-image
    container_name: staging-backend
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      DATABASE_URL: mysql://wms_user:wms_pass@staging-database:3306/warehouse_wms
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      PORT: 5001
    ports:
      - "5001:5001"  # Staging port (different from production 5000)
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      staging-database:
        condition: service_healthy
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Staging Frontend - Exact copy of production setup
  staging-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: staging-frontend-image
    container_name: staging-frontend
    restart: unless-stopped
    ports:
      - "8080:80"      # Staging HTTP (different from production 80)
      - "8443:443"     # Staging HTTPS (different from production 443)
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - staging-backend
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Git Watcher (optional, same as production)
  staging-git-watcher:
    image: alpine:latest
    container_name: staging-git-watcher
    restart: unless-stopped
    volumes:
      - .:/app
    networks:
      - staging-network
    command: sh -c 'apk add --no-cache git openssh-client && while true; do echo "Git watcher running"; sleep 3600; done'

  # Database Backup (optional, same as production)
  staging-db-backup:
    image: alpine:latest
    container_name: staging-db-backup
    restart: unless-stopped
    volumes:
      - staging_mysql_data:/var/lib/mysql
      - ./database-backups:/backups
    networks:
      - staging-network
    command: sh -c 'apk add --no-cache mysql-client && while true; do echo "Backup service running"; sleep 86400; done'

volumes:
  staging_mysql_data:

networks:
  staging-network:
    driver: bridge

# Staging environment configuration:
# - Database: warehouse_wms (same as production, but on port 3308)
# - Credentials: wms_user / wms_pass (same as production)
# - Backend: port 5001 (different from production 5000)
# - Frontend: port 8080/8443 (different from production 80/443)
# - Owner: staging user (non-root)
# - Purpose: Exact clone of production for testing
