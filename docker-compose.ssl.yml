version: '3.8'

services:
  # Database Service
  database:
    image: mysql:8.0
    container_name: wms-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-warehouse_wms}
      MYSQL_USER: ${DB_USER:-wms_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-wmspassword}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - wms-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wms-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${DB_USER:-wms_user}:${DB_PASSWORD:-wmspassword123}@database:3306/${DB_NAME:-warehouse_wms}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    networks:
      - wms-network
    command: sh -c "npx prisma migrate deploy && npm run start"

  # Frontend Service with SSL
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.ssl
    container_name: wms-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./frontend/nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - wms-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: wms-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Auto Git Commit Service (File Watcher)
  git-watcher:
    image: alpine:latest
    container_name: wms-git-watcher
    restart: unless-stopped
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    command: sh -c "apk add --no-cache git inotify-tools && sh /workspace/scripts/git-auto-commit.sh"
    networks:
      - wms-network

networks:
  wms-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
