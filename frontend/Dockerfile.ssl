# Multi-stage build
FROM node:18-alpine AS builder

WORKDIR /app

# Clean install
RUN rm -rf node_modules package-lock.json yarn.lock 2>/dev/null || true

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --legacy-peer-deps --verbose 2>&1 || npm install --legacy-peer-deps

# Copy source code
COPY . .

# Build application
RUN chmod +x node_modules/.bin/* 2>/dev/null || true && npm run build

# Production stage with SSL support
FROM nginx:alpine

# Install openssl for SSL and fallback certificate generation
RUN apk add --no-cache openssl

# Copy built assets
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration (will be overridden by volume mount)
COPY nginx-ssl.conf /etc/nginx/conf.d/default.conf

# Create certbot directories
RUN mkdir -p /var/www/certbot

# Expose ports
EXPOSE 80 443

# Copy entrypoint that provisions fallback certificates when none exist
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]
