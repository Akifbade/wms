
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  website: 'website',
  logo: 'logo',
  plan: 'plan',
  ratePerDay: 'ratePerDay',
  currency: 'currency',
  isActive: 'isActive',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  accentColor: 'accentColor',
  showCompanyName: 'showCompanyName',
  logoSize: 'logoSize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  role: 'role',
  skills: 'skills',
  isActive: 'isActive',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatar: 'avatar',
  position: 'position',
  department: 'department',
  lastLoginAt: 'lastLoginAt',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry'
};

exports.Prisma.RackScalarFieldEnum = {
  id: 'id',
  code: 'code',
  qrCode: 'qrCode',
  rackType: 'rackType',
  location: 'location',
  capacityTotal: 'capacityTotal',
  capacityUsed: 'capacityUsed',
  minCapacity: 'minCapacity',
  status: 'status',
  lastActivity: 'lastActivity',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RackInventoryScalarFieldEnum = {
  id: 'id',
  rackId: 'rackId',
  itemType: 'itemType',
  itemId: 'itemId',
  quantityCurrent: 'quantityCurrent',
  quantityReserved: 'quantityReserved',
  lastMovement: 'lastMovement',
  updatedBy: 'updatedBy',
  companyId: 'companyId'
};

exports.Prisma.RackActivityScalarFieldEnum = {
  id: 'id',
  rackId: 'rackId',
  userId: 'userId',
  activityType: 'activityType',
  itemDetails: 'itemDetails',
  quantityBefore: 'quantityBefore',
  quantityAfter: 'quantityAfter',
  photos: 'photos',
  notes: 'notes',
  gpsLocation: 'gpsLocation',
  timestamp: 'timestamp',
  companyId: 'companyId'
};

exports.Prisma.ShipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  referenceId: 'referenceId',
  originalBoxCount: 'originalBoxCount',
  currentBoxCount: 'currentBoxCount',
  type: 'type',
  arrivalDate: 'arrivalDate',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  clientEmail: 'clientEmail',
  description: 'description',
  estimatedValue: 'estimatedValue',
  notes: 'notes',
  qrCode: 'qrCode',
  status: 'status',
  assignedAt: 'assignedAt',
  releasedAt: 'releasedAt',
  storageCharge: 'storageCharge',
  companyId: 'companyId',
  createdById: 'createdById',
  assignedById: 'assignedById',
  releasedById: 'releasedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isWarehouseShipment: 'isWarehouseShipment',
  warehouseData: 'warehouseData',
  shipper: 'shipper',
  consignee: 'consignee',
  category: 'category',
  awbNumber: 'awbNumber',
  flightNumber: 'flightNumber',
  origin: 'origin',
  destination: 'destination',
  customerName: 'customerName'
};

exports.Prisma.ShipmentBoxScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  boxNumber: 'boxNumber',
  qrCode: 'qrCode',
  rackId: 'rackId',
  status: 'status',
  assignedAt: 'assignedAt',
  releasedAt: 'releasedAt',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pieceWeight: 'pieceWeight',
  pieceQR: 'pieceQR'
};

exports.Prisma.ShipmentItemScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  itemName: 'itemName',
  itemDescription: 'itemDescription',
  category: 'category',
  quantity: 'quantity',
  weight: 'weight',
  value: 'value',
  barcode: 'barcode',
  photos: 'photos',
  boxNumbers: 'boxNumbers',
  customAttributes: 'customAttributes',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  withdrawnBoxCount: 'withdrawnBoxCount',
  remainingBoxCount: 'remainingBoxCount',
  withdrawalDate: 'withdrawalDate',
  status: 'status',
  reason: 'reason',
  notes: 'notes',
  photos: 'photos',
  receiptNumber: 'receiptNumber',
  withdrawnBy: 'withdrawnBy',
  authorizedBy: 'authorizedBy',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  category: 'category',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  receipts: 'receipts',
  expenseDate: 'expenseDate',
  approvedBy: 'approvedBy',
  status: 'status',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  templateType: 'templateType',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  showLogo: 'showLogo',
  footerText: 'footerText',
  termsConditions: 'termsConditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  storageRateType: 'storageRateType',
  storageRatePerBox: 'storageRatePerBox',
  storageRatePerWeek: 'storageRatePerWeek',
  storageRatePerMonth: 'storageRatePerMonth',
  taxEnabled: 'taxEnabled',
  taxRate: 'taxRate',
  currency: 'currency',
  invoicePrefix: 'invoicePrefix',
  invoiceDueDays: 'invoiceDueDays',
  gracePeriodDays: 'gracePeriodDays',
  minimumCharge: 'minimumCharge',
  logoUrl: 'logoUrl',
  logoPosition: 'logoPosition',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  showCompanyDetails: 'showCompanyDetails',
  showBankDetails: 'showBankDetails',
  showTermsConditions: 'showTermsConditions',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountName: 'accountName',
  iban: 'iban',
  swiftCode: 'swiftCode',
  invoiceFooterText: 'invoiceFooterText',
  termsAndConditions: 'termsAndConditions',
  paymentInstructions: 'paymentInstructions',
  taxRegistrationNo: 'taxRegistrationNo',
  companyRegistrationNo: 'companyRegistrationNo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChargeTypeScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  billingSettingsId: 'billingSettingsId',
  name: 'name',
  code: 'code',
  description: 'description',
  category: 'category',
  calculationType: 'calculationType',
  rate: 'rate',
  minCharge: 'minCharge',
  maxCharge: 'maxCharge',
  applyOnRelease: 'applyOnRelease',
  applyOnStorage: 'applyOnStorage',
  isTaxable: 'isTaxable',
  isActive: 'isActive',
  isDefault: 'isDefault',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  companyId: 'companyId',
  shipmentId: 'shipmentId',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  clientAddress: 'clientAddress',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  invoiceType: 'invoiceType',
  isWarehouseInvoice: 'isWarehouseInvoice',
  warehouseData: 'warehouseData',
  subtotal: 'subtotal',
  taxAmount: 'taxAmount',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  paymentStatus: 'paymentStatus',
  paidAmount: 'paidAmount',
  balanceDue: 'balanceDue',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  transactionRef: 'transactionRef',
  notes: 'notes',
  termsAndConditions: 'termsAndConditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceLineItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  chargeTypeId: 'chargeTypeId',
  description: 'description',
  category: 'category',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  amount: 'amount',
  isTaxable: 'isTaxable',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  companyId: 'companyId',
  amount: 'amount',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  transactionRef: 'transactionRef',
  receiptNumber: 'receiptNumber',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ShipmentChargesScalarFieldEnum = {
  id: 'id',
  shipmentId: 'shipmentId',
  companyId: 'companyId',
  currentStorageCharge: 'currentStorageCharge',
  daysStored: 'daysStored',
  lastCalculatedDate: 'lastCalculatedDate',
  totalBoxesReleased: 'totalBoxesReleased',
  totalInvoiced: 'totalInvoiced',
  totalPaid: 'totalPaid',
  outstandingBalance: 'outstandingBalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomFieldScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  fieldName: 'fieldName',
  fieldType: 'fieldType',
  fieldOptions: 'fieldOptions',
  isRequired: 'isRequired',
  isActive: 'isActive',
  section: 'section',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomFieldValueScalarFieldEnum = {
  id: 'id',
  customFieldId: 'customFieldId',
  entityType: 'entityType',
  entityId: 'entityId',
  fieldValue: 'fieldValue',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShipmentSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  requireClientEmail: 'requireClientEmail',
  requireClientPhone: 'requireClientPhone',
  requireEstimatedValue: 'requireEstimatedValue',
  requirePhotos: 'requirePhotos',
  autoGenerateQR: 'autoGenerateQR',
  qrCodePrefix: 'qrCodePrefix',
  showClientAddress: 'showClientAddress',
  requireClientAddress: 'requireClientAddress',
  showDescription: 'showDescription',
  requireDescription: 'requireDescription',
  showReferenceId: 'showReferenceId',
  requireReferenceId: 'requireReferenceId',
  showNotes: 'showNotes',
  requireNotes: 'requireNotes',
  showWarehouseMode: 'showWarehouseMode',
  showShipperDetails: 'showShipperDetails',
  requireShipperDetails: 'requireShipperDetails',
  showConsigneeDetails: 'showConsigneeDetails',
  requireConsigneeDetails: 'requireConsigneeDetails',
  showWeight: 'showWeight',
  requireWeight: 'requireWeight',
  showDimensions: 'showDimensions',
  requireDimensions: 'requireDimensions',
  showStorageType: 'showStorageType',
  showSpecialInstructions: 'showSpecialInstructions',
  showEstimatedDays: 'showEstimatedDays',
  requireEstimatedDays: 'requireEstimatedDays',
  defaultEstimatedDays: 'defaultEstimatedDays',
  formSectionOrder: 'formSectionOrder',
  defaultStorageType: 'defaultStorageType',
  allowMultipleRacks: 'allowMultipleRacks',
  requireRackAssignment: 'requireRackAssignment',
  autoAssignRack: 'autoAssignRack',
  notifyOnLowCapacity: 'notifyOnLowCapacity',
  lowCapacityThreshold: 'lowCapacityThreshold',
  requireReleaseApproval: 'requireReleaseApproval',
  releaseApproverRole: 'releaseApproverRole',
  requireReleasePhotos: 'requireReleasePhotos',
  requireIDVerification: 'requireIDVerification',
  generateReleaseInvoice: 'generateReleaseInvoice',
  autoSendInvoiceEmail: 'autoSendInvoiceEmail',
  storageRatePerDay: 'storageRatePerDay',
  storageRatePerBox: 'storageRatePerBox',
  chargePartialDay: 'chargePartialDay',
  minimumChargeDays: 'minimumChargeDays',
  releaseHandlingFee: 'releaseHandlingFee',
  releasePerBoxFee: 'releasePerBoxFee',
  releaseTransportFee: 'releaseTransportFee',
  notifyClientOnIntake: 'notifyClientOnIntake',
  notifyClientOnRelease: 'notifyClientOnRelease',
  notifyOnStorageAlert: 'notifyOnStorageAlert',
  storageAlertDays: 'storageAlertDays',
  enableCustomFields: 'enableCustomFields',
  requiredCustomFields: 'requiredCustomFields',
  allowPartialRelease: 'allowPartialRelease',
  partialReleaseMinBoxes: 'partialReleaseMinBoxes',
  requirePartialApproval: 'requirePartialApproval',
  requireReleaseSignature: 'requireReleaseSignature',
  requireCollectorID: 'requireCollectorID',
  allowProxyCollection: 'allowProxyCollection',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TemplateSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  companyName: 'companyName',
  companyLogo: 'companyLogo',
  companyAddress: 'companyAddress',
  companyPhone: 'companyPhone',
  companyEmail: 'companyEmail',
  companyWebsite: 'companyWebsite',
  companyLicense: 'companyLicense',
  invoiceTemplateType: 'invoiceTemplateType',
  invoiceTitle: 'invoiceTitle',
  invoiceShowLogo: 'invoiceShowLogo',
  invoiceShowAddress: 'invoiceShowAddress',
  invoiceShowPhone: 'invoiceShowPhone',
  invoiceShowEmail: 'invoiceShowEmail',
  invoiceShowWebsite: 'invoiceShowWebsite',
  invoiceShowLicense: 'invoiceShowLicense',
  invoiceShowFooter: 'invoiceShowFooter',
  invoiceHeaderBg: 'invoiceHeaderBg',
  invoiceHeaderText: 'invoiceHeaderText',
  invoiceFooterText: 'invoiceFooterText',
  invoiceTerms: 'invoiceTerms',
  invoiceShowBorders: 'invoiceShowBorders',
  invoiceShowGrid: 'invoiceShowGrid',
  invoiceTableStyle: 'invoiceTableStyle',
  invoiceFontSize: 'invoiceFontSize',
  invoicePaperSize: 'invoicePaperSize',
  invoicePrimaryColor: 'invoicePrimaryColor',
  invoiceSecondaryColor: 'invoiceSecondaryColor',
  invoiceAccentColor: 'invoiceAccentColor',
  invoiceDangerColor: 'invoiceDangerColor',
  releaseNoteTemplate: 'releaseNoteTemplate',
  releaseNoteTitle: 'releaseNoteTitle',
  releaseNoteHeaderBg: 'releaseNoteHeaderBg',
  releaseNoteShowLogo: 'releaseNoteShowLogo',
  releaseShowShipment: 'releaseShowShipment',
  releaseShowStorage: 'releaseShowStorage',
  releaseShowItems: 'releaseShowItems',
  releaseShowCollector: 'releaseShowCollector',
  releaseShowCharges: 'releaseShowCharges',
  releaseShowPhotos: 'releaseShowPhotos',
  releaseShowTerms: 'releaseShowTerms',
  releaseShowSignatures: 'releaseShowSignatures',
  releaseTerms: 'releaseTerms',
  releaseFooterText: 'releaseFooterText',
  releasePrimaryColor: 'releasePrimaryColor',
  printMarginTop: 'printMarginTop',
  printMarginBottom: 'printMarginBottom',
  printMarginLeft: 'printMarginLeft',
  printMarginRight: 'printMarginRight',
  language: 'language',
  dateFormat: 'dateFormat',
  timeFormat: 'timeFormat',
  currencySymbol: 'currencySymbol',
  currencyPosition: 'currencyPosition',
  customField1Label: 'customField1Label',
  customField1Value: 'customField1Value',
  customField2Label: 'customField2Label',
  customField2Value: 'customField2Value',
  customField3Label: 'customField3Label',
  customField3Value: 'customField3Value',
  requireStaffSignature: 'requireStaffSignature',
  requireClientSignature: 'requireClientSignature',
  signatureHeight: 'signatureHeight',
  showQRCode: 'showQRCode',
  qrCodePosition: 'qrCodePosition',
  qrCodeSize: 'qrCodeSize',
  showWatermark: 'showWatermark',
  watermarkText: 'watermarkText',
  watermarkOpacity: 'watermarkOpacity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  resource: 'resource',
  action: 'action',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  role: 'role',
  permissionId: 'permissionId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MovingJobScalarFieldEnum = {
  id: 'id',
  jobCode: 'jobCode',
  jobTitle: 'jobTitle',
  clientName: 'clientName',
  clientPhone: 'clientPhone',
  clientEmail: 'clientEmail',
  jobDate: 'jobDate',
  jobAddress: 'jobAddress',
  dropoffAddress: 'dropoffAddress',
  status: 'status',
  teamLeaderId: 'teamLeaderId',
  driverName: 'driverName',
  vehicleNumber: 'vehicleNumber',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.JobAssignmentScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  userId: 'userId',
  role: 'role',
  checkInAt: 'checkInAt',
  checkOutAt: 'checkOutAt',
  hourlyRate: 'hourlyRate',
  hoursWorked: 'hoursWorked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  companyId: 'companyId'
};

exports.Prisma.MaterialCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentId: 'parentId',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackingMaterialScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  unit: 'unit',
  category: 'category',
  categoryId: 'categoryId',
  minStockLevel: 'minStockLevel',
  totalQuantity: 'totalQuantity',
  unitCost: 'unitCost',
  sellingPrice: 'sellingPrice',
  isActive: 'isActive',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact: 'contact',
  phone: 'phone',
  email: 'email',
  address: 'address',
  rating: 'rating',
  notes: 'notes',
  isActive: 'isActive',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockBatchScalarFieldEnum = {
  id: 'id',
  batchNumber: 'batchNumber',
  materialId: 'materialId',
  vendorId: 'vendorId',
  vendorName: 'vendorName',
  purchaseOrder: 'purchaseOrder',
  purchaseDate: 'purchaseDate',
  quantityPurchased: 'quantityPurchased',
  quantityRemaining: 'quantityRemaining',
  unitCost: 'unitCost',
  sellingPrice: 'sellingPrice',
  receivedById: 'receivedById',
  notes: 'notes',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RackStockLevelScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  rackId: 'rackId',
  stockBatchId: 'stockBatchId',
  quantity: 'quantity',
  lastUpdated: 'lastUpdated',
  companyId: 'companyId'
};

exports.Prisma.MaterialIssueScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  materialId: 'materialId',
  stockBatchId: 'stockBatchId',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  rackId: 'rackId',
  issuedById: 'issuedById',
  issuedAt: 'issuedAt',
  notes: 'notes',
  companyId: 'companyId'
};

exports.Prisma.MaterialReturnScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  materialId: 'materialId',
  issueId: 'issueId',
  quantityIssued: 'quantityIssued',
  quantityUsed: 'quantityUsed',
  quantityGood: 'quantityGood',
  quantityDamaged: 'quantityDamaged',
  restocked: 'restocked',
  restockedAt: 'restockedAt',
  rackId: 'rackId',
  recordedById: 'recordedById',
  recordedAt: 'recordedAt',
  notes: 'notes',
  companyId: 'companyId'
};

exports.Prisma.MaterialDamageScalarFieldEnum = {
  id: 'id',
  returnId: 'returnId',
  materialId: 'materialId',
  quantity: 'quantity',
  reason: 'reason',
  photoUrls: 'photoUrls',
  status: 'status',
  recordedById: 'recordedById',
  recordedAt: 'recordedAt',
  approvedById: 'approvedById',
  approvedAt: 'approvedAt',
  approvalNotes: 'approvalNotes',
  rejectionReason: 'rejectionReason',
  companyId: 'companyId'
};

exports.Prisma.MaterialApprovalScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  approvalType: 'approvalType',
  status: 'status',
  requestedById: 'requestedById',
  requestedAt: 'requestedAt',
  decisionById: 'decisionById',
  decidedAt: 'decidedAt',
  decisionNotes: 'decisionNotes',
  subjectReturnId: 'subjectReturnId',
  subjectDamageId: 'subjectDamageId',
  companyId: 'companyId'
};

exports.Prisma.JobCostSnapshotScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  recordedAt: 'recordedAt',
  materialsCost: 'materialsCost',
  laborCost: 'laborCost',
  damageLoss: 'damageLoss',
  otherCost: 'otherCost',
  revenue: 'revenue',
  profit: 'profit',
  profitMargin: 'profitMargin',
  currency: 'currency',
  notes: 'notes',
  companyId: 'companyId'
};

exports.Prisma.SystemPluginScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  version: 'version',
  status: 'status',
  entryPointUrl: 'entryPointUrl',
  checksum: 'checksum',
  installedAt: 'installedAt',
  activatedAt: 'activatedAt',
  deactivatedAt: 'deactivatedAt',
  companyId: 'companyId'
};

exports.Prisma.SystemPluginLogScalarFieldEnum = {
  id: 'id',
  pluginId: 'pluginId',
  action: 'action',
  status: 'status',
  message: 'message',
  performedBy: 'performedBy',
  createdAt: 'createdAt',
  companyId: 'companyId'
};

exports.Prisma.MaterialUsageScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  shipmentId: 'shipmentId',
  stockBatchId: 'stockBatchId',
  quantityUsed: 'quantityUsed',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  usageType: 'usageType',
  usedById: 'usedById',
  usedAt: 'usedAt',
  notes: 'notes',
  companyId: 'companyId',
  createdAt: 'createdAt'
};

exports.Prisma.MaterialTransferScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  fromRackId: 'fromRackId',
  toRackId: 'toRackId',
  stockBatchId: 'stockBatchId',
  quantity: 'quantity',
  transferType: 'transferType',
  status: 'status',
  requestedById: 'requestedById',
  approvedById: 'approvedById',
  completedById: 'completedById',
  requestedAt: 'requestedAt',
  approvedAt: 'approvedAt',
  completedAt: 'completedAt',
  notes: 'notes',
  companyId: 'companyId'
};

exports.Prisma.StockAlertScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  alertType: 'alertType',
  threshold: 'threshold',
  currentStock: 'currentStock',
  message: 'message',
  isResolved: 'isResolved',
  resolvedById: 'resolvedById',
  resolvedAt: 'resolvedAt',
  notificationSent: 'notificationSent',
  notificationSentAt: 'notificationSentAt',
  createdAt: 'createdAt',
  companyId: 'companyId'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  vendorId: 'vendorId',
  vendorName: 'vendorName',
  orderDate: 'orderDate',
  expectedDate: 'expectedDate',
  receivedDate: 'receivedDate',
  status: 'status',
  totalAmount: 'totalAmount',
  notes: 'notes',
  createdById: 'createdById',
  approvedById: 'approvedById',
  approvedAt: 'approvedAt',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchaseOrderId: 'purchaseOrderId',
  materialId: 'materialId',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  receivedQuantity: 'receivedQuantity',
  companyId: 'companyId'
};

exports.Prisma.MaterialPriceHistoryScalarFieldEnum = {
  id: 'id',
  materialId: 'materialId',
  vendorId: 'vendorId',
  unitCost: 'unitCost',
  sellingPrice: 'sellingPrice',
  effectiveDate: 'effectiveDate',
  source: 'source',
  companyId: 'companyId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Company: 'Company',
  User: 'User',
  Rack: 'Rack',
  RackInventory: 'RackInventory',
  RackActivity: 'RackActivity',
  Shipment: 'Shipment',
  ShipmentBox: 'ShipmentBox',
  ShipmentItem: 'ShipmentItem',
  Withdrawal: 'Withdrawal',
  Expense: 'Expense',
  InvoiceSettings: 'InvoiceSettings',
  BillingSettings: 'BillingSettings',
  ChargeType: 'ChargeType',
  Invoice: 'Invoice',
  InvoiceLineItem: 'InvoiceLineItem',
  Payment: 'Payment',
  ShipmentCharges: 'ShipmentCharges',
  CustomField: 'CustomField',
  CustomFieldValue: 'CustomFieldValue',
  ShipmentSettings: 'ShipmentSettings',
  TemplateSettings: 'TemplateSettings',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  MovingJob: 'MovingJob',
  JobAssignment: 'JobAssignment',
  MaterialCategory: 'MaterialCategory',
  PackingMaterial: 'PackingMaterial',
  Vendor: 'Vendor',
  StockBatch: 'StockBatch',
  RackStockLevel: 'RackStockLevel',
  MaterialIssue: 'MaterialIssue',
  MaterialReturn: 'MaterialReturn',
  MaterialDamage: 'MaterialDamage',
  MaterialApproval: 'MaterialApproval',
  JobCostSnapshot: 'JobCostSnapshot',
  SystemPlugin: 'SystemPlugin',
  SystemPluginLog: 'SystemPluginLog',
  MaterialUsage: 'MaterialUsage',
  MaterialTransfer: 'MaterialTransfer',
  StockAlert: 'StockAlert',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  MaterialPriceHistory: 'MaterialPriceHistory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
