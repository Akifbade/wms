// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  uid               String     @unique
  email             String     @unique
  displayName       String
  passwordHash      String
  role              String     @default("user") // admin, user, checker, driver
  status            String     @default("active") // active, inactive, blocked
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  createdJobs       JobFile[]  @relation("createdBy")
  checkedJobs       JobFile[]  @relation("checkedBy")
  approvedJobs      JobFile[]  @relation("approvedBy")
  rejectedJobs      JobFile[]  @relation("rejectedBy")
  deliveryJobs      JobFile[]  @relation("deliveryAssignedBy")
  feedback          Feedback[]

  @@index([email])
  @@index([role])
}

model JobFile {
  id                    String     @id @default(cuid())
  jfn                   String     @unique // Job File Number
  d                     String     // Date
  billingDate           String?
  po                    String?    // PO Number
  cl                    String?    // Client List (JSON - stored as text)
  pt                    String?    // Port of Transshipment (JSON - stored as text)
  in                    String?    // Insurance
  bd                    String?    // Billing Denomination
  sm                    String?    // Salesman
  sh                    String?    // Shipper
  co                    String?    // Consignee
  mawb                  String?    // Master AWB
  hawb                  String?    // House AWB
  ts                    String?    // Trade Status
  or                    String?    // Origin
  pc                    String?    // Place of Discharge
  gw                    String?    // Gross Weight
  de                    String?    // Description (text)
  vw                    String?    // Volume Weight
  dsc                   String?    // Description (text)
  ca                    String?    // Capacity
  tn                    String?    // Terms & Conditions (text)
  vn                    String?    // Vessel Name
  fv                    String?    // Flight/Vessel
  cn                    String?    // Consignment Notes (text)
  charges               Charge[]
  re                    String?    // Remarks (text)
  pb                    String?    // Billing Details (text)

  status                String     @default("pending") // pending, checked, approved, rejected
  totalCost             Float      @default(0)
  totalSelling          Float      @default(0)
  totalProfit           Float      @default(0)

  // Creator and timestamps
  createdById           String?
  createdBy             User?      @relation("createdBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt             DateTime   @default(now())

  // Checker info
  checkedById           String?
  checkedBy             User?      @relation("checkedBy", fields: [checkedById], references: [id], onDelete: SetNull)
  checkedAt             DateTime?

  // Approver info
  approvedById          String?
  approvedBy            User?      @relation("approvedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedAt            DateTime?

  // Rejection info
  rejectedById          String?
  rejectedBy            User?      @relation("rejectedBy", fields: [rejectedById], references: [id], onDelete: SetNull)
  rejectedAt            DateTime?
  rejectionReason       String?

  lastUpdatedBy         String?    // Track last updater
  updatedAt             DateTime   @updatedAt

  // POD fields
  deliveryAssigned      Boolean    @default(false)
  deliveryStatus        String     @default("Pending") // Pending, Delivered
  deliveryAssignedAt    DateTime?
  deliveryAssignedById  String?
  deliveryAssignedBy    User?      @relation("deliveryAssignedBy", fields: [deliveryAssignedById], references: [id], onDelete: SetNull)
  driverUid             String?
  driverName            String?
  driverMobile          String?
  isExternal            Boolean    @default(false)
  deliveryLocation      String?
  deliveryNotes         String?
  completedAt           DateTime?
  receiverName          String?
  receiverMobile        String?
  signatureDataUrl      String?
  photoDataUrl          String?
  latitude              Float?
  longitude             Float?
  geolocationName       String?
  feedbackStatus        String     @default("pending") // pending, rated
  isManual              Boolean    @default(false)

  // Relations
  feedback              Feedback[]

  @@index([status])
  @@index([createdById])
  @@index([jfn])
  @@index([deliveryStatus])
}

model Charge {
  id                String     @id @default(cuid())
  jobFileId         String
  jobFile           JobFile    @relation(fields: [jobFileId], references: [id], onDelete: Cascade)
  l                 String     // Label/Description
  c                 String     // Cost
  s                 String     // Selling
  n                 String?    // Notes

  @@index([jobFileId])
}

model Client {
  id                String     @id @default(cuid())
  name              String     @unique
  address           String?
  contactPerson     String?
  phone             String?
  email             String?
  type              String?    // Shipper, Consignee, etc
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([name])
}

model CustomLink {
  id                String     @id @default(cuid())
  name              String
  url               String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model AppSetting {
  id                String     @id @default(cuid())
  key               String     @unique
  value             String
  updatedAt         DateTime   @updatedAt

  @@index([key])
}

model Feedback {
  id                String     @id @default(cuid())
  jobFileId         String
  jobFile           JobFile    @relation(fields: [jobFileId], references: [id], onDelete: Cascade)
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating            Int?       // 1-5 star rating
  comments          String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([jobFileId])
  @@index([userId])
}
