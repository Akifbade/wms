version: '3.8'

# PRODUCTION ENVIRONMENT - OPTIMIZED & SECURE
# Run with: docker-compose -f docker-compose-production.yml up -d

services:
  # ===== PRODUCTION DATABASE =====
  database:
    image: mysql:8.0
    container_name: wms-database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-production_root_secure_pass}
      MYSQL_DATABASE: ${DB_NAME:-warehouse_wms}
      MYSQL_USER: ${DB_USER:-wms_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-production_db_password}
      # Production settings
      MYSQL_INITDB_ARGS: >
        --default-storage-engine=InnoDB
        --character-set-server=utf8mb4
        --collation-server=utf8mb4_unicode_ci
        --max_connections=1000
        --max_allowed_packet=1024M
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - wms-prod-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-production_root_secure_pass}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    # Production: Persist data across restarts
    sysctls:
      - net.ipv4.ip_forward=0

  # ===== PRODUCTION BACKEND =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: wms-backend:latest
    container_name: wms-backend
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${DB_USER:-wms_user}:${DB_PASSWORD:-production_db_password}@database:3306/${DB_NAME:-warehouse_wms}
      JWT_SECRET: ${JWT_SECRET:-production-jwt-secret-must-change}
      PORT: 5000
      # Production specific
      LOG_LEVEL: info
      ENABLE_MONITORING: "true"
      CORS_ORIGIN: https://qgocargo.cloud,https://www.qgocargo.cloud
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    networks:
      - wms-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
      - NET_RAW
    # Ensure clean Prisma migration
    command: sh -c "npx prisma migrate deploy --skip-generate && npx ts-node src/index.ts"

  # ===== PRODUCTION FRONTEND =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=https://qgocargo.cloud/api
        - VITE_API_URL=https://qgocargo.cloud/api
        - NODE_ENV=production
    image: wms-frontend:latest
    container_name: wms-frontend
    restart: always
    environment:
      # Production frontend config
      REACT_APP_API_URL: https://qgocargo.cloud/api
      VITE_API_URL: https://qgocargo.cloud/api
      NODE_ENV: production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx-ssl.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - backend
    networks:
      - wms-prod-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
      - NET_RAW

  # ===== DATABASE BACKUP SERVICE =====
  db-backup:
    image: alpine:3.18
    container_name: wms-db-backup
    restart: always
    environment:
      BACKUP_DIR: /backups
    volumes:
      - ./database-backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - wms-prod-network
    command: sh -c "
      apk add --no-cache mysql-client docker-cli &&
      while true; do
        TIMESTAMP=\$(date +\"%Y%m%d_%H%M%S\")
        echo \"[Production] Backing up database at \$TIMESTAMP\" &&
        docker exec wms-database mysqldump -u ${DB_USER:-wms_user} -p${DB_PASSWORD:-production_db_password} ${DB_NAME:-warehouse_wms} > /backups/prod_backup_\$TIMESTAMP.sql 2>/dev/null &&
        echo \"[Production] Backup completed\" &&
        # Keep only last 7 days
        find /backups -name 'prod_backup_*.sql' -mtime +7 -delete 2>/dev/null &&
        sleep 3600;
      done
    "
    cap_drop:
      - ALL

  # ===== PORTAINER (Container Management) =====
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - "8000:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - wms-prod-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

# ===== PRODUCTION NETWORK - ISOLATED =====
networks:
  wms-prod-network:
    driver: bridge
    name: wms-prod-network
    driver_opts:
      com.docker.network.bridge.name: br-prod
      # Prevent inter-container discovery
      com.docker.network.bridge.name: br-prod

# ===== PRODUCTION VOLUMES =====
volumes:
  mysql_prod_data:
    driver: local
    name: mysql_prod_data
    # Production: Use local storage with backups
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/mysql_prod_data/_data

  portainer_data:
    driver: local
    name: portainer_data
