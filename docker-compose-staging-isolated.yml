version: '3.8'

# STAGING ENVIRONMENT - COMPLETELY ISOLATED FROM PRODUCTION
# This file should be run with: docker-compose -f docker-compose-staging-isolated.yml up -d

services:
  # ===== STAGING DATABASE - ISOLATED FROM PRODUCTION =====
  staging-db:
    image: mysql:8.0
    container_name: wms-staging-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: staging_root_pass_12345
      MYSQL_DATABASE: warehouse_staging
      MYSQL_USER: staging_user
      MYSQL_PASSWORD: staging_pass_12345
      # KEY: Different database from production
    ports:
      - "3307:3306"  # ISOLATED PORT (production uses 3306)
    volumes:
      - staging_mysql_data:/var/lib/mysql
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - staging-network  # ISOLATED NETWORK
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "staging_user", "-pstaging_pass_12345"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      # Ensure completely different from production
      MYSQL_INITDB_ARGS: "--default-storage-engine=InnoDB"

  # ===== STAGING BACKEND - ISOLATED FROM PRODUCTION =====
  staging-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=staging
    image: wms-staging-backend:latest
    container_name: wms-staging-backend
    restart: unless-stopped
    environment:
      NODE_ENV: staging
      # KEY: Different database connection
      DATABASE_URL: mysql://staging_user:staging_pass_12345@staging-db:3306/warehouse_staging
      JWT_SECRET: ${STAGING_JWT_SECRET:-staging-secret-key-change-in-production}
      PORT: 5001
      # Extra staging markers
      ENVIRONMENT_TYPE: staging
      API_PREFIX: /staging-api
    ports:
      - "5001:5001"  # ISOLATED PORT (production uses 5000)
    volumes:
      - ./backend/uploads-staging:/app/uploads
      - ./backend/logs-staging:/app/logs
    depends_on:
      staging-db:
        condition: service_healthy
    networks:
      - staging-network  # ISOLATED NETWORK
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: sh -c "npx prisma migrate deploy --skip-generate && npx ts-node src/index.ts"
    # Prevent connection to production network
    sysctls:
      - net.ipv4.ip_forward=0

  # ===== STAGING FRONTEND - ISOLATED FROM PRODUCTION =====
  staging-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://staging-backend:5001
        - VITE_API_URL=http://staging-backend:5001
    image: wms-staging-frontend:latest
    container_name: wms-staging-frontend
    restart: unless-stopped
    environment:
      # KEY: Point to staging backend
      REACT_APP_API_URL: http://staging-backend:5001
      VITE_API_URL: http://staging-backend:5001
      NODE_ENV: staging
      # Extra staging markers
      ENVIRONMENT_TYPE: staging
    ports:
      - "8080:80"    # ISOLATED PORT (production uses 80)
      - "8443:443"   # ISOLATED PORT (production uses 443)
    volumes:
      - ./frontend/nginx-staging.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - staging-backend
    networks:
      - staging-network  # ISOLATED NETWORK
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===== STAGING DATABASE BACKUP - ISOLATED =====
  staging-db-backup:
    image: alpine:latest
    container_name: wms-staging-db-backup
    restart: unless-stopped
    environment:
      BACKUP_DIR: /backups-staging
      DB_CONTAINER: wms-staging-db
      DB_NAME: warehouse_staging
    volumes:
      - ./database-backups-staging:/backups-staging
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - staging-network  # ISOLATED NETWORK
    command: sh -c "
      apk add --no-cache mysql-client docker-cli &&
      while true; do
        TIMESTAMP=\$(date +\"%Y%m%d_%H%M%S\")
        echo \"[Staging] Backing up database at \$TIMESTAMP\" &&
        docker exec wms-staging-db mysqldump -u staging_user -pstaging_pass_12345 warehouse_staging > /backups-staging/staging_backup_\$TIMESTAMP.sql &&
        echo \"[Staging] Backup completed: staging_backup_\$TIMESTAMP.sql\" &&
        sleep 3600;
      done
    "

# ===== NETWORKING - COMPLETELY ISOLATED =====
networks:
  staging-network:
    driver: bridge
    name: staging-network
    # KEY: Isolated from production network
    driver_opts:
      com.docker.network.bridge.name: br-staging

# ===== VOLUMES - COMPLETELY ISOLATED =====
volumes:
  staging_mysql_data:
    driver: local
    name: staging_mysql_data
    # Stores staging data separately from production
